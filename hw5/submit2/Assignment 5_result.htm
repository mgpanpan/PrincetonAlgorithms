<!DOCTYPE html>
<html class="supports-svg" xmlns:fb="http://ogp.me/ns/fb#" itemtype="http://schema.org"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=IE7"><meta name="fragment" content="!"><meta name="robots" content="NOODP"><meta charset="utf-8"><meta property="og:title" content="Coursera"><meta property="og:type" content="website"><meta property="og:image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta property="og:url" content="https://www.coursera.org/assignment/part_results?part_id=8"><meta property="og:site_name" content="Coursera"><meta property="og:locale" content="en_US"><meta property="og:description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta property="fb:admins" content="727836538,4807654"><meta property="fb:app_id" content="274998519252278"><meta name="twitter:site" content="Coursera"><meta name="twitter:app:name:iphone" content="Coursera"><meta name="twitter:app:name:ipad" content="Coursera"><meta name="twitter:app:name:googleplay" content="Coursera"><meta name="twitter:app:id:iphone" content="id736535961"><meta name="twitter:app:id:ipad" content="id736535961"><meta name="twitter:app:id:googleplay" content="org.coursera.android"><meta name="description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta name="image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta name="apple-itunes-app" content="app-id=736535961"><title>Coursera</title>    <link href="Assignment%205_result_files/spark.css" rel="stylesheet" type="text/css">
      <link href="Assignment%205_result_files/course.css" rel="stylesheet" type="text/css">
    <link href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico" rel="icon">
<script src="Assignment%205_result_files/ga.js" async="" type="text/javascript"></script><script src="Assignment%205_result_files/b5m.js" charset="utf-8" id="b5mmain" type="text/javascript"></script><script src="Assignment%205_result_files/routes.js" data-requiremodule="pages/spark/routes" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><meta content="summary" name="twitter:card"><meta content="Coursera" name="twitter:title"><meta content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits." name="twitter:description"><meta content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png" name="twitter:image:src"><script src="Assignment%205_result_files/204.js" data-requiremodule="js/lib/204" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/400.js" data-requiremodule="js/lib/400" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/student-page.js" data-requiremodule="pages/spark/views/template/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/student-page_003.js" data-requiremodule="pages/spark/views/template/student-page.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/sparkSurveyQuestionsSessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/sparkSurveyQuestions/sparkSurveyQuestionsSessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/sessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/quickQuestions/sessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/SessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/SessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/QuestionCollection.js" data-requiremodule="bundles/assess/framework/QuestionCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/QuestionModel.js" data-requiremodule="bundles/assess/framework/QuestionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/student-page_002.js" data-requiremodule="pages/spark/views/template/nls/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/backbone.js" data-requiremodule="bundles/assess/lib/backbone.hascollections" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/underscore.js" data-requiremodule="js/lib/underscore.extend" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/header_003.js" data-requiremodule="pages/spark/views/template/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/sidebar.js" data-requiremodule="pages/spark/views/template/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/readme.js" data-requiremodule="js/lib/readme" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/header_002.js" data-requiremodule="pages/spark/views/template/header.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/LearnerStoriesCollection.js" data-requiremodule="pages/analytics/models/LearnerStoriesCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/assessApi.js" data-requiremodule="pages/spark-survey/assessApi" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/sidebar_002.js" data-requiremodule="pages/spark/views/template/sidebar.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/signature_track.js" data-requiremodule="spark/app/signature/js/signature_track" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/header.js" data-requiremodule="pages/spark/views/template/nls/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/LearnerStoryModel.js" data-requiremodule="pages/analytics/models/LearnerStoryModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/sidebar_003.js" data-requiremodule="pages/spark/views/template/nls/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/signatureTrackLastChanceModal.js" data-requiremodule="spark/app/signature/js/signatureTrackLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/flexjoinLastChanceModal.js" data-requiremodule="spark/app/signature/js/flexjoinLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/util.js" data-requiremodule="js/lib/util" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%205_result_files/path.js" data-requiremodule="js/lib/path" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script></head><body><div id="fb-root"></div><div id="spark-help" class="hide"></div><a href="https://learner.coursera.help/hc/requests/new" target="_blank"><div style="z-index: 1" data-networkprioritysupportwidget="" role="button" class="helpwidget-tab hide">Premium Support</div></a><!-- - track IE8 and less browser for eventing purposes--><!--[if lte IE 8]><script>window._204 = window._204 || [];
window._gaq = window._gaq || [];
window._gaq.push(
    ['_setAccount', 'UA-28377374-1'],
    ['_setDomainName', window.location.hostname],
    ['_setAllowLinker', true],
    ['_trackPageview', window.location.pathname]);
window._204.push(
  ['client', 'home'],
  {key:"pageview", value:window.location.pathname});</script><script src="https://dw0ugk4msqulk.cloudfront.net/ebfbef57ce42b5989d5da36106da956cf9ffed2c/js/lib/204.js"></script><script src="https://ssl.google-analytics.com/ga.js"></script><![endif]--><div id="fb-root"></div><div id="origami" data-js="origami"><div><div><div class="coursera-page"><div class="coursera-header" role="menubar"><div class="hidden">This page features MathJax technology to render mathematical formulae.
If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.</div><h1 class="hidden">Algorithms, Part I</h1><!-- UNTIL dashboard announcement expires 2014-12-01 (then delete this code)--><div class="helpcenter-announcement"><div style="visibility: visible; display: none;" class="readme" data-readme="helpcenter-announcement" data-readme-show-count="1" data-readme-show-until-closed="data-readme-show-until-closed" data-readme-expires="Mar 31, 2015"><div>Need technical help? Visit our new <a href="https://learner.coursera.help/" data-readme-close="data-readme-close">Learner Help Center!</a></div><div data-readme-close="data-readme-close" class="readme-close-icon"><span class="icon-remove"></span></div></div></div><div role="banner" class="course-topbar container-fluid"><div class="row-fluid"><div class="span3"><a href="https://www.coursera.org/" data-if-linkable="add-referrer" class="course-topbar-logo"></a></div><div style="float:right;" class="course-topbar-nav-container span9"><h2 class="hidden">Top Navigation Bar</h2><ul class="course-topbar-nav-list"><li class="course-topbar-nav-list-item"><a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a></li><li tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="data-popup-close" style="cursor:pointer;" data-popup-direction="se" class="course-topbar-nav-list-item"><a data-user-id="8585290">Pan Mengguan<i class="icon-caret-down"></i></a></li></ul></div></div><div id="course-topbar-aboutus" class="course-topbar-sublist"><a href="https://www.coursera.org//about/" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">About Us</a><a href="https://www.coursera.org//about/careers" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Careers</a><a href="https://www.coursera.org//about/people" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">People</a><a href="https://www.coursera.org//about/contact" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Contact Us</a></div><div id="course-topbar-my" class="course-topbar-sublist"><a data-popup-close="data-popup-close" href="https://www.coursera.org/" target="_new" class="course-topbar-sublist-item">My Courses</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/profile" target="_new" class="course-topbar-sublist-item">Profile</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/accomplishments" target="_new" class="course-topbar-sublist-item">Course Records</a><a href="https://www.coursera.org/account/settings" target="_new" class="course-topbar-sublist-item">Settings</a><a href="https://class.coursera.org/algs4partI-009/class/preferences" class="course-topbar-sublist-item">Course Preferences</a><form action="/api/logoutSsr/v1?csrf3-token=1444694240.LcNmz85YHE6fh6SJ" method="post"><button data-popup-close="data-popup-close" type="submit" class="course-topbar-sublist-item">Sign Out</button></form></div></div><div class="course-topbanner-wrapper"><div class="course-topbanner"><div class="course-topbanner-university-logo"><a href="https://www.coursera.org/princeton" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/princeton" class="coursera-university-color"><img src="Assignment%205_result_files/university_logo.png" alt="princeton"></a></div><h1 class="course-topbanner-header"><a href="https://class.coursera.org/algs4partI-009/" data-if-linkable="modal-lock" class="course-topbanner-name coursera-university-color">Algorithms, Part I</a><br><span style="" class="course-topbanner-instructor">by Kevin Wayne, Robert Sedgewick</span></h1></div></div></div><div style="position:relative;" class="container-fluid"><div class="row-fluid"><div id="course-page-sidebar" role="navigation"><div class="coursera-sidebar" role="menubar"><div id="course-page-sidebar" role="navigation"><div class="course-navbar-container"><a href="https://class.coursera.org/algs4partI-009" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_index"><img src="Assignment%205_result_files/logo.png" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page"></a><div data-coursera-course-search-nav-widget="data-coursera-course-search-nav-widget" class="input-append course-search-nav-box"><form method="get" action="/algs4partI-009/class/search" data-js-search-form="data-js-search-form" class="form-inline minimized-search"><label for="course-search-nav-input" class="accessible-text-for-reader">Search this course</label><input id="course-search-nav-input" name="q" data-js-search-input="data-js-search-input" type="text">&nbsp;<button type="submit" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="search" class="btn icon-search"><span class="accessible-text-for-reader">Search</span></button></form></div><h2 class="hidden">Side Navigation Bar</h2><ul class="course-navbar-list"><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/class/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Home" class="coursera-university-color"><span>Home </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Syllabus" class="coursera-university-color"><span>Syllabus </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Schedule" class="coursera-university-color"><span>Schedule </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Lectures" class="coursera-university-color"><span>Lectures </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Exercises" class="coursera-university-color"><span>Exercises </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Programming_Assignments" class="coursera-university-color"><span>Programming Assignments </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Job_Interview_Questions" class="coursera-university-color"><span>Job Interview Questions </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/forum/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Discussion_Forums" class="coursera-university-color"><span>Discussion Forums </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=ScheduleGoogleHangouts" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Google+_Hangouts" class="coursera-university-color"><span>Google+ Hangouts </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Errata" class="coursera-university-color"><span>Errata </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Surveys" class="coursera-university-color"><span>Surveys </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Booksite" class="coursera-university-color"><span>Booksite </span><span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="https://accounts.coursera.org/i/zendesk/courserahelp?return_to=https://learner.coursera.help/hc/" target="_blank" title="Open help articles in new window" class="coursera-university-color"><i class="icon-question-sign"></i>Help Center</a></li></ul><ul style="list-style-type:none;margin-left: 10px;"></ul></div></div></div></div><div id="course-page-content" role="main"><div style="display: block;" id="spark" class="hide"><h2 class="course-page-header">Programming Assignment 5:  Kd-Trees | kdtree.zip
  <a class="coursera-reporter-link" title="Click here if you're experiencing technical problems or found errors in the course materials." target="_blank" href="https://accounts.coursera.org/i/zendesk/courserahelp?return_to=https://learner.coursera.help/hc/articles/201212249-Programming-Assignments">
     Help Center
  </a>
</h2>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-03-Oct 01:24:11</td></tr>
        <tr><td>Raw Score</td><td>82.93 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">21/21 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#994700">13/41 tests passed</font>

Aggregate score: <font color="#1F9900">82.93%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 7.9K Oct  3 08:25 KdTree.java
-rw-r--r-- 1 2.3K Oct  3 08:25 PointSET.java
-rw-r--r-- 1 2.8K Oct  3 08:25 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

================================================================

% javac KdTree.java
*-----------------------------------------------------------
Note: KdTree.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 8 total tests.

Test 1: Test size() by inserting N random points
        (size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking for N = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  10000 calls in 10000-by-10000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1000-by-1000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 100-by-100 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 10-by-10 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1-by-1 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==&gt; passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed

Test 8: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 8/8 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  *  Distinct points: no two points (or rectangles) share both an
     x-coordinate and a y-coordinate
  *  General points: no restrictions on the x-coordinates or y-coordinates
     of the points (or rectangles)

A point in an M-by-M grid means that it is of the form (i/M, j/M),
where i and j are integers between 0 and M

Running 13 total tests.

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
  *  10 random general points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
  *  10000 random general points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  40 random rectangles and 40 distinct points in 10-by-10 grid
  *  1 random rectangles and 1 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random general points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random general points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random general points in 100-by-100 grid
  *  4000 random rectangles and 4000 random general points in 10-by-10 grid
  *  4000 random rectangles and 4000 random general points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3 = 0, p4, p5, and p6, respectively
        (a data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with probabilties 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 13/13 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          176                160
=&gt; passed        2          304                288
=&gt; passed        5          688                672
=&gt; passed       10         1328               1312
=&gt; passed       25         3248               3232
=&gt; passed      100        12848              12832
=&gt; passed      400        51248              51232
=&gt; passed      800       102448             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 128.00 N + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     433975         
=&gt; passed   320000    1207560         
=&gt; passed   640000     993234         
=&gt; passed  1280000     647550         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     531107         
=&gt; passed    20000     574846         
=&gt; passed    40000     539755         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2404         
=&gt; passed    20000       1152         
=&gt; passed    40000        517         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2814         
=&gt; passed    20000       1296         
=&gt; passed    40000        570         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>   160000     309247              22.6  (11.3x)     33.2              31.7              21.6         
=&gt; <font color="#990000"><b>FAILED</b></font>   320000     467977              23.0  (11.5x)     33.8              32.3              22.0         
=&gt; <font color="#990000"><b>FAILED</b></font>   640000     423393              24.5  (12.3x)     36.1              34.6              23.5         
=&gt; <font color="#990000"><b>FAILED</b></font>  1280000     382379              26.6  (13.3x)     39.2              37.7              25.6         
==&gt; 0/4 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     489462              18.5              17.5              18.0         
=&gt; passed    20000     500539              19.7              18.7              19.2         
=&gt; passed    40000     457044              21.8              20.8              21.3         
=&gt; passed    80000     411175              22.0              21.0              21.5         
=&gt; passed   160000     371691              23.2              22.2              22.7         
=&gt; passed   320000     338256              25.0              24.0              24.5         
=&gt; passed   640000     343369              25.7              24.7              25.2         
=&gt; passed  1280000     288557              27.2              26.2              26.7         
==&gt; 8/8 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     262708              50.4              31.1              50.1              12.1         
=&gt; passed    20000     259411              52.7              32.6              53.3              16.2         
=&gt; passed    40000     222854              64.9              39.3              63.1              14.1         
=&gt; passed    80000     232683              67.1              40.7              65.2              14.9         
=&gt; passed   160000     140896              70.0              42.5              70.9              20.4         
=&gt; passed   320000     182510              67.0              40.2              65.2              15.7         
=&gt; passed   640000     181783              72.0              43.3              70.7              19.2         
=&gt; passed  1280000     141294              78.7              47.0              74.8              14.2         
==&gt; 8/8 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   284391                   0.0                    0.0                   115.5             114.1         
=&gt; passed    20000   278262                   0.0                    0.0                   127.1             126.0         
=&gt; passed    40000   240446                   0.0                    0.0                   151.0             148.4         
=&gt; passed    80000   213078                   0.0                    0.0                   152.5             152.9         
=&gt; passed   160000   164270                   0.0                    0.0                   167.2             166.1         
=&gt; passed   320000   137011                   0.0                    0.0                   174.3             173.1         
=&gt; passed   640000   157361                   0.0                    0.0                   180.1             179.7         

Total: 0/28 tests passed:<font color="#990000"><b> Could not complete tests in allotted time, which results in a reported score of 0.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 18:07:31</td></tr>
        <tr><td>Raw Score</td><td>82.93 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">21/21 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#994700">13/41 tests passed</font>

Aggregate score: <font color="#1F9900">82.93%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 7.9K Oct  3 01:08 KdTree.java
-rw-r--r-- 1 2.1K Oct  3 01:08 PointSET.java
-rw-r--r-- 1 2.8K Oct  3 01:08 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

================================================================

% javac KdTree.java
*-----------------------------------------------------------
Note: KdTree.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:1: Do not use .* in import statements.
Checkstyle ends with 1 errors.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 8 total tests.

Test 1: Test size() by inserting N random points
        (size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking for N = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  10000 calls in 10000-by-10000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1000-by-1000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 100-by-100 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 10-by-10 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1-by-1 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==&gt; passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed

Test 8: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 8/8 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  *  Distinct points: no two points (or rectangles) share both an
     x-coordinate and a y-coordinate
  *  General points: no restrictions on the x-coordinates or y-coordinates
     of the points (or rectangles)

A point in an M-by-M grid means that it is of the form (i/M, j/M),
where i and j are integers between 0 and M

Running 13 total tests.

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
  *  10 random general points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
  *  10000 random general points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  40 random rectangles and 40 distinct points in 10-by-10 grid
  *  1 random rectangles and 1 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random general points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random general points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random general points in 100-by-100 grid
  *  4000 random rectangles and 4000 random general points in 10-by-10 grid
  *  4000 random rectangles and 4000 random general points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3 = 0, p4, p5, and p6, respectively
        (a data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with probabilties 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 13/13 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          176                160
=&gt; passed        2          304                288
=&gt; passed        5          688                672
=&gt; passed       10         1328               1312
=&gt; passed       25         3248               3232
=&gt; passed      100        12848              12832
=&gt; passed      400        51248              51232
=&gt; passed      800       102448             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 128.00 N + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     431492         
=&gt; passed   320000    1140772         
=&gt; passed   640000     985197         
=&gt; passed  1280000     681343         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     526771         
=&gt; passed    20000     561724         
=&gt; passed    40000     533968         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2418         
=&gt; passed    20000       1147         
=&gt; passed    40000        519         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2767         
=&gt; passed    20000       1299         
=&gt; passed    40000        584         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>   160000     306190              22.6  (11.3x)     33.2              31.7              21.6         
=&gt; <font color="#990000"><b>FAILED</b></font>   320000     468177              23.0  (11.5x)     33.8              32.3              22.0         
=&gt; <font color="#990000"><b>FAILED</b></font>   640000     462817              24.5  (12.3x)     36.1              34.6              23.5         
=&gt; <font color="#990000"><b>FAILED</b></font>  1280000     405252              26.6  (13.3x)     39.2              37.7              25.6         
==&gt; 0/4 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     485861              18.5              17.5              18.0         
=&gt; passed    20000     501510              19.7              18.7              19.2         
=&gt; passed    40000     464335              21.8              20.8              21.3         
=&gt; passed    80000     422416              22.0              21.0              21.5         
=&gt; passed   160000     379252              23.2              22.2              22.7         
=&gt; passed   320000     388891              25.0              24.0              24.5         
=&gt; passed   640000     336526              25.7              24.7              25.2         
=&gt; passed  1280000     301951              27.2              26.2              26.7         
==&gt; 8/8 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     268169              50.4              31.1              50.1              12.1         
=&gt; passed    20000     261483              52.7              32.6              53.3              16.2         
=&gt; passed    40000     224826              64.9              39.3              63.1              14.1         
=&gt; passed    80000     221409              67.1              40.7              65.2              14.9         
=&gt; passed   160000     147617              70.0              42.5              70.9              20.4         
=&gt; passed   320000     192315              67.0              40.2              65.2              15.7         
=&gt; passed   640000     151559              72.0              43.3              70.7              19.2         
=&gt; passed  1280000     144204              78.7              47.0              74.8              14.2         
==&gt; 8/8 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   283986                   0.0                    0.0                   115.5             114.1         
=&gt; passed    20000   281339                   0.0                    0.0                   127.1             126.0         
=&gt; passed    40000   242573                   0.0                    0.0                   151.0             148.4         
=&gt; passed    80000   219969                   0.0                    0.0                   152.5             152.9         
=&gt; passed   160000   189779                   0.0                    0.0                   167.2             166.1         
=&gt; passed   320000   200643                   0.0                    0.0                   174.3             173.1         
=&gt; passed   640000   157428                   0.0                    0.0                   180.1             179.7         

Total: 0/28 tests passed:<font color="#990000"><b> Could not complete tests in allotted time, which results in a reported score of 0.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 18:03:52</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>

PointSET.java failed to compile, javac reports: <p>
</p><pre>PointSET.java:46: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)     // all points that are inside the rectangle
                                   ^
  symbol:   class RectHV
  location: class PointSET
1 error</pre></pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 17:58:14</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>

PointSET.java failed to compile, javac reports: <p>
</p><pre>PointSET.java:46: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)     // all points that are inside the rectangle
                                   ^
  symbol:   class RectHV
  location: class PointSET
1 error</pre>
KdTree.java failed to compile, javac reports: <p>
</p><pre>KdTree.java:77: error: cannot find symbol
    private Node put(Node node, Point2D p, RectHV rect, boolean isHorizontal)
                                           ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:175: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)
                                   ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:183: error: cannot find symbol
    private void range(Node x, RectHV rect, Queue q)
                               ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:20: error: cannot find symbol
        private RectHV rect;    // the axis-aligned rectangle corresponding to this node
                ^
  symbol:   class RectHV
  location: class Node
KdTree.java:23: error: cannot find symbol
        public Node(Point2D p, RectHV rect, Node lb, Node rt)
                               ^
  symbol:   class RectHV
  location: class Node
KdTree.java:66: error: cannot find symbol
        root = put(root, p, new RectHV(0.0, 0.0, 1.0, 1.0), true);
                                ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:89: error: cannot find symbol
                              new RectHV(rect.xmin(), rect.ymin(), node.p.x(), rect.ymax()), // left
                                  ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:93: error: cannot find symbol
                              new RectHV(node.p.x(), rect.ymin(), rect.xmax(), rect.ymax()), // right
                                  ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:98: error: cannot find symbol
                node.lb = put(node.lb, p, new RectHV(rect.xmin(), rect.ymin(), rect.xmax(), node.p.y()), // down
                                              ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:101: error: cannot find symbol
                node.rt = put(node.rt, p, new RectHV(rect.xmin(), node.p.y(), rect.xmax(), rect.ymax()), // up
                                              ^
  symbol:   class RectHV
  location: class KdTree


10 errors</pre></pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 17:54:49</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>

PointSET.java failed to compile, javac reports: <p>
</p><pre>PointSET.java:13: error: cannot find symbol
    private SET&lt;Point2D&gt; points;
                ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:28: error: cannot find symbol
    public void insert(Point2D p)   // add the point to the set (if it is not already in the set)
                       ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:34: error: cannot find symbol
    public boolean contains(Point2D p)   // does the set contain point p?
                            ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:46: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)     // all points that are inside the rectangle
                                   ^
  symbol:   class RectHV
  location: class PointSET
PointSET.java:46: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)     // all points that are inside the rectangle
                    ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:56: error: cannot find symbol
    public Point2D nearest(Point2D p)     // a nearest neighbor in the set to point p; null if the set is empty
                           ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:56: error: cannot find symbol
    public Point2D nearest(Point2D p)     // a nearest neighbor in the set to point p; null if the set is empty
           ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:16: error: cannot find symbol
        points = new SET&lt;Point2D&gt;();
                         ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:42: error: cannot find symbol
        for (Point2D point : points)
             ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:49: error: cannot find symbol
        Queue&lt;Point2D&gt; q = new Queue&lt;Point2D&gt;();
              ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:49: error: cannot find symbol
        Queue&lt;Point2D&gt; q = new Queue&lt;Point2D&gt;();
                                     ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:50: error: cannot find symbol
        for (Point2D point : points)
             ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:59: error: cannot find symbol
        Point2D pNearest = null;
        ^
  symbol:   class Point2D
  location: class PointSET
PointSET.java:61: error: cannot find symbol
        for (Point2D point : points) {
             ^
  symbol:   class Point2D
  location: class PointSET
14 errors</pre>
KdTree.java failed to compile, javac reports: <p>
</p><pre>KdTree.java:35: error: cannot find symbol
    private Point2D pNearest = null;
            ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:62: error: cannot find symbol
    public void insert(Point2D p)
                       ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:76: error: cannot find symbol
    private Node put(Node node, Point2D p, RectHV rect, boolean isHorizontal)
                                ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:76: error: cannot find symbol
    private Node put(Node node, Point2D p, RectHV rect, boolean isHorizontal)
                                           ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:111: error: cannot find symbol
    public boolean contains(Point2D p)
                            ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:124: error: cannot find symbol
    private Node get(Node node, Point2D p, boolean isHorizontal)
                                ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:174: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)
                                   ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:174: error: cannot find symbol
    public Iterable&lt;Point2D&gt; range(RectHV rect)
                    ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:182: error: cannot find symbol
    private void range(Node x, RectHV rect, Queue q)
                               ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:196: error: cannot find symbol
    public Point2D nearest(Point2D p)
                           ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:196: error: cannot find symbol
    public Point2D nearest(Point2D p)
           ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:206: error: cannot find symbol
    private void nearest(Node x, Point2D p, boolean isHorizontal)
                                 ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:18: error: cannot find symbol
        private Point2D p;      // the point
                ^
  symbol:   class Point2D
  location: class Node
KdTree.java:19: error: cannot find symbol
        private RectHV rect;    // the axis-aligned rectangle corresponding to this node
                ^
  symbol:   class RectHV
  location: class Node
KdTree.java:22: error: cannot find symbol
        public Node(Point2D p, RectHV rect, Node lb, Node rt)
                    ^
  symbol:   class Point2D
  location: class Node
KdTree.java:22: error: cannot find symbol
        public Node(Point2D p, RectHV rect, Node lb, Node rt)
                               ^
  symbol:   class RectHV
  location: class Node
KdTree.java:65: error: cannot find symbol
        root = put(root, p, new RectHV(0.0, 0.0, 1.0, 1.0), true);
                                ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:88: error: cannot find symbol
                              new RectHV(rect.xmin(), rect.ymin(), node.p.x(), rect.ymax()), // left
                                  ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:92: error: cannot find symbol
                              new RectHV(node.p.x(), rect.ymin(), rect.xmax(), rect.ymax()), // right
                                  ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:97: error: cannot find symbol
                node.lb = put(node.lb, p, new RectHV(rect.xmin(), rect.ymin(), rect.xmax(), node.p.y()), // down
                                              ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:100: error: cannot find symbol
                node.rt = put(node.rt, p, new RectHV(rect.xmin(), node.p.y(), rect.xmax(), rect.ymax()), // up
                                              ^
  symbol:   class RectHV
  location: class KdTree
KdTree.java:177: error: cannot find symbol
        Queue&lt;Point2D&gt; q = new Queue&lt;Point2D&gt;();
              ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:177: error: cannot find symbol
        Queue&lt;Point2D&gt; q = new Queue&lt;Point2D&gt;();
                                     ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:237: error: cannot find symbol
        kdtree.insert(new Point2D(0.7, 0.2));
                          ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:239: error: cannot find symbol
        kdtree.insert(new Point2D(0.5, 0.4));
                          ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:241: error: cannot find symbol
        kdtree.insert(new Point2D(0.2, 0.3));
                          ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:243: error: cannot find symbol
        kdtree.insert(new Point2D(0.4, 0.7));
                          ^
  symbol:   class Point2D
  location: class KdTree
KdTree.java:245: error: cannot find symbol
        kdtree.insert(new Point2D(0.9, 0.6));
                          ^
  symbol:   class Point2D
  location: class KdTree
28 errors</pre></pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 17:36:55</td></tr>
        <tr><td>Raw Score</td><td>82.93 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">21/21 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#994700">13/41 tests passed</font>

Aggregate score: <font color="#1F9900">82.93%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 7.6K Oct  3 00:37 KdTree.java
-rw-r--r-- 1 2.1K Oct  3 00:37 PointSET.java
-rw-r--r-- 1 2.7K Oct  3 00:37 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac PointSET.java
*-----------------------------------------------------------

================================================================

% javac KdTree.java
*-----------------------------------------------------------
Note: KdTree.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.

================================================================



% checkstyle *.java
*-----------------------------------------------------------
PointSET.java:5: Do not use .* in import statements.
PointSET.java:68:6: '{' is not followed by whitespace.
PointSET.java:68:6: '}' is not preceded with whitespace.
KdTree.java:5: Do not use .* in import statements.
KdTree.java:19:39: Only one statement per line allowed.
KdTree.java:19:53: Only one statement per line allowed.
KdTree.java:19:67: Only one statement per line allowed.
KdTree.java:69:70: Only one statement per line allowed.
Checkstyle ends with 8 errors.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
PointSET:

KdTree:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in PointSET
*-----------------------------------------------------------
Running 8 total tests.

Test 1: Test size() by inserting N random points
        (size may be less than N because of duplicates)
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 2: Test isEmpty() by checking for N = 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3: Insert N random points and check contains() for random query points
  *  100000 random points in 100000-by-100000 grid
  *  100000 random points in 10000-by-10000 grid
  *  100000 random points in 1000-by-1000 grid
  *  100000 random points in 100-by-100 grid
  *  100000 random points in 10-by-10 grid
==&gt; passed

Test 4: Insert N random points and check nearest() for random query points
  *  3000 random points in 100000-by-100000 grid
  *  3000 random points in 10000-by-10000 grid
  *  3000 random points in 1000-by-1000 grid
  *  3000 random points in 100-by-100 grid
  *  3000 random points in 10-by-10 grid
==&gt; passed

Test 5: Insert N random points and check range() for random query rectangles
  *  1000 random rectangles and points in 100000-by-100000 grid
  *  1000 random rectangles and points in 10000-by-10000 grid
  *  1000 random rectangles and points in 1000-by-1000 grid
  *  1000 random rectangles and points in 100-by-100 grid
  *  1000 random rectangles and points in 10-by-10 grid
==&gt; passed

Test 6: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  10000 calls in 10000-by-10000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1000-by-1000 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 100-by-100 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 10-by-10 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
  *  10000 calls in 1-by-1 grid with random points
     and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
==&gt; passed

Test 7: Intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with random points
     and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed

Test 8: Test whether two PointSET objects can be created at the same time
==&gt; passed


Total: 8/8 tests passed!

================================================================

Testing methods in KdTree
*-----------------------------------------------------------
In the tests below, we consider three classes of points and rectangles.

  *  Distinct points: no two points (or rectangles) share both an
     x-coordinate and a y-coordinate
  *  General points: no restrictions on the x-coordinates or y-coordinates
     of the points (or rectangles)

A point in an M-by-M grid means that it is of the form (i/M, j/M),
where i and j are integers between 0 and M

Running 13 total tests.

Test 1a: Insert N distinct points and check size() after each insertion
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 1b: Insert N points and check size() after each insertion
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
  *  10 random general points in 1-by-1 grid
==&gt; passed

Test 2: Test isEmpty() by checking that it returns the right results for 0, 1, and 2 points
  *  zero points
  *  one point
  *  two points
==&gt; passed

Test 3a: Insert N distinct points and call contains() with random query points
  *  100000 random distinct points in 100000-by-100000 grid
  *  100000 random distinct points in 10000-by-10000 grid
  *  100000 random distinct points in 1000-by-1000 grid
  *  10000 random distinct points in 100-by-100 grid
  *  100 random distinct points in 10-by-10 grid
  *  1 random distinct points in 1-by-1 grid
==&gt; passed

Test 3b: Insert N points and call contains() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
  *  10000 random general points in 1-by-1 grid
==&gt; passed

Test 4: Test whether two KdTree objects can be created at the same time
==&gt; passed

Test 5a: Insert N distinct points and call range() for random query rectangles
  *  4000 random rectangles and 4000 distinct points in 100000-by-100000 grid
  *  4000 random rectangles and 4000 distinct points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 distinct points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 distinct points in 100-by-100 grid
  *  40 random rectangles and 40 distinct points in 10-by-10 grid
  *  1 random rectangles and 1 distinct points in 1-by-1 grid
==&gt; passed

Test 5b: Insert N points and call range() for random query rectangles
  *  4000 random rectangles and 4000 random general points in 10000-by-10000 grid
  *  4000 random rectangles and 4000 random general points in 1000-by-1000 grid
  *  4000 random rectangles and 4000 random general points in 100-by-100 grid
  *  4000 random rectangles and 4000 random general points in 10-by-10 grid
  *  4000 random rectangles and 4000 random general points in 1-by-1 grid
==&gt; passed

Test 5c: Insert N points and call range() for tiny
rectangles enclosing each point.
  *  4000 tiny rectangles and 4000 points in 100000-by-100000 grid
  *  4000 tiny rectangles and 4000 points in 10000-by-10000 grid
  *  4000 tiny rectangles and 4000 points in 1000-by-1000 grid
  *  4000 tiny rectangles and 4000 points in 100-by-100 grid
  *  4000 tiny rectangles and 4000 points in 10-by-10 grid
==&gt; passed

Test 6a: Insert N distinct points and call nearest() with random query points
  *  100000 random general points in 100000-by-100000 grid
  *  100000 random general points in 10000-by-10000 grid
  *  100000 random general points in 1000-by-1000 grid
  *  100000 random general points in 100-by-100 grid
  *  100000 random general points in 10-by-10 grid
==&gt; passed

Test 6b: Insert N points and call nearest() with random query points
  *  10000 random general points in 1000-by-1000 grid
  *  10000 random general points in 100-by-100 grid
  *  10000 random general points in 10-by-10 grid
==&gt; passed

Test 7: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
  *  20000 calls in 100000-by-100000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10000-by-10000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1000-by-1000 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 100-by-100 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 10-by-10 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
  *  20000 calls in 1-by-1 grid with probabilties 0.05, 0.05, 0.3, 0.1, 0.2, 0.2
==&gt; passed

Test 8: test intermixed sequence of calls to isEmpty(), size(), insert(),
        contains(), range(), and nearest() with probabilities
        p1, p2, p3 = 0, p4, p5, and p6, respectively
        (a data structure with 0 points)
  *  1000 calls in 1000-by-1000 grid with probabilties 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
  *  1000 calls in 1000-by-1000 grid with probabilties 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
==&gt; passed


Total: 13/13 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point2D
*-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Computing memory of RectHV
*-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Computing memory of KdTree
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with N points (including Point2D and RectHV objects).
Maximum allowed memory is 312N + 192 bytes.

                 N       student (bytes)    reference (bytes)
--------------------------------------------------------------
=&gt; passed        1          176                160
=&gt; passed        2          304                288
=&gt; passed        5          688                672
=&gt; passed       10         1328               1312
=&gt; passed       25         3248               3232
=&gt; passed      100        12848              12832
=&gt; passed      400        51248              51232
=&gt; passed      800       102448             102432
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 128.00 N + 48.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 N + 32.00  (R^2 = 1.000)
================================================================



******************************************************************************
*  timing
******************************************************************************

Timing PointSET
*-----------------------------------------------------------
Running 13 total tests.


Inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed   160000     436941         
=&gt; passed   320000    1158552         
=&gt; passed   640000     984819         
=&gt; passed  1280000     674541         
==&gt; 4/4 tests passed

Performing contains() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000     530767         
=&gt; passed    20000     569818         
=&gt; passed    40000     533176         
==&gt; 3/3 tests passed

Performing range() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2415         
=&gt; passed    20000       1154         
=&gt; passed    40000        521         
==&gt; 3/3 tests passed

Performing nearest() queries after inserting N points into a PointSET.

               N      ops per second
----------------------------------------
=&gt; passed    10000       2850         
=&gt; passed    20000       1304         
=&gt; passed    40000        585         
==&gt; 3/3 tests passed

Total: 13/13 tests passed!

================================================================



Timing KdTree
*-----------------------------------------------------------
Running 28 total tests.


Inserting N points into a 2d tree. The table gives the average number of calls to methods
in RectHV and Point per call to insert().

                                                                                                Point2D
               N      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>   160000     317298              22.6  (11.3x)     33.2              31.7              21.6         
=&gt; <font color="#990000"><b>FAILED</b></font>   320000     461999              23.0  (11.5x)     33.8              32.3              22.0         
=&gt; <font color="#990000"><b>FAILED</b></font>   640000     463752              24.5  (12.3x)     36.1              34.6              23.5         
=&gt; <font color="#990000"><b>FAILED</b></font>  1280000     390919              26.6  (13.3x)     39.2              37.7              25.6         
==&gt; 0/4 tests passed

Performing contains() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to contain().

                                                                               Point2D
               N      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
=&gt; passed    10000     486001              18.5              17.5              18.0         
=&gt; passed    20000     505791              19.7              18.7              19.2         
=&gt; passed    40000     466635              21.8              20.8              21.3         
=&gt; passed    80000     427841              22.0              21.0              21.5         
=&gt; passed   160000     379656              23.2              22.2              22.7         
=&gt; passed   320000     394807              25.0              24.0              24.5         
=&gt; passed   640000     345769              25.7              24.7              25.2         
=&gt; passed  1280000     306816              27.2              26.2              26.7         
==&gt; 8/8 tests passed

Performing range() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to range().

               N      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
=&gt; passed    10000     260388              50.4              31.1              50.1              12.1         
=&gt; passed    20000     259587              52.7              32.6              53.3              16.2         
=&gt; passed    40000     216398              64.9              39.3              63.1              14.1         
=&gt; passed    80000     206416              67.1              40.7              65.2              14.9         
=&gt; passed   160000     153266              70.0              42.5              70.9              20.4         
=&gt; passed   320000     199672              67.0              40.2              65.2              15.7         
=&gt; passed   640000     152002              72.0              43.3              70.7              19.2         
=&gt; passed  1280000     143965              78.7              47.0              74.8              14.2         
==&gt; 8/8 tests passed

Performing nearest() queries after inserting N points into a 2d tree. The table gives
the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               N      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
=&gt; passed    10000   285463                   0.0                    0.0                   115.5             114.1         
=&gt; passed    20000   281554                   0.0                    0.0                   127.1             126.0         
=&gt; passed    40000   242057                   0.0                    0.0                   151.0             148.4         
=&gt; passed    80000   203479                   0.0                    0.0                   152.5             152.9         
=&gt; passed   160000   214471                   0.0                    0.0                   167.2             166.1         
=&gt; passed   320000   207712                   0.0                    0.0                   174.3             173.1         
=&gt; passed   640000   168471                   0.0                    0.0                   180.1             179.7         

Total: 0/28 tests passed:<font color="#990000"><b> Could not complete tests in allotted time, which results in a reported score of 0.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-02-Oct 17:32:32</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#009900">PASSED</font>

API:          <font color="#990000">FAILED</font>
<pre>PointSET:<p>

The following fields should be made private:
  *  edu.princeton.cs.algs4.SET&lt;edu.princeton.cs.algs4.Point2D&gt; points


</p></pre></pre></td></tr>
    </tbody>
</table>

</div></div></div></div></div><div class="coursera-footer"></div></div></div></div><!--[if gte IE 9]><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><![endif]-->
<!--[if lte IE 8]><script>document.getElementById("coursera-loading-nojs").style.display = 'block';</script><![endif]-->
<!--[if !IE]> --><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><!-- <![endif]--><script>if (/zh/i.test(window.localStorage ? localStorage.getItem('locale') : '') || '{{ locale }}') {
  document.getElementById('get-browser-zh').style.display = 'block';
}</script><!--[if !IE]> --><script>document.getElementById('coursera-loading-js').style.display = 'block';</script><!-- <![endif]-->
<script src="Assignment%205_result_files/require.js"></script><script data-baseurl="https://dw0ugk4msqulk.cloudfront.net/ebfbef57ce42b5989d5da36106da956cf9ffed2c/" data-version="ebfbef57ce42b5989d5da36106da956cf9ffed2c" data-timestamp="1443550029862" data-debug="0" data-locale="en" id="_require">if(document.getElementById('coursera-loading-js').style.display == 'block') {
  (function(el) {
     require.config({
       //enforceDefine: true,
       waitSeconds: 75,
       baseUrl: el.getAttribute('data-baseurl'),
       urlArgs: el.getAttribute('data-debug') == '1' ? 'v=' + el.getAttribute('data-timestamp') : '',
       shim: {
          'underscore': {
             exports: '_'
          },
          'backbone': {
             deps: ['underscore', 'jquery'],
             exports: 'Backbone',
             init: function(_, $) {
               Backbone.$ = $;
               return Backbone;
             }
          },
          'pages/hg/thirdparty/js/backbone.marionette': {
            deps: ['backbone']
          },
          'pages/hg/thirdparty/js/webshims/polyfiller': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/webshims/extras/mousepress': {
            deps: ['jquery', 'pages/hg/thirdparty/js/webshims/polyfiller']
          },
          'pages/hg/thirdparty/js/jquery.throttle': {
            deps: ['jquery']
          },
          'js/lib/jquery.linkify': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/js/bootstrap/alert': {
            deps: ['jquery', 'pages/hg/thirdparty/js/bootstrap/transition']
          },
          'spark/core/js/jquery_ui': {
            deps: ['jquery']
          },
          'spark/core/js/jquery.history': {
            deps: ['jquery']
          },
          'js/lib/bootstrap.tooltip': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/bootstrap/transition': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/bootstrap/tab': {
            deps: ['jquery']
          },
          'bundles/videojs/lib/video.4.3.0': {
            exports: 'vjs'
          }
       },
       paths: {
          'q': 'js/vendor/q.v1-0-1',
          'react-with-addons': 'js/vendor/react-with-addons.v0-12',
          'jquery':                         'pages/spark/jquery',
          'underscore':                     'js/vendor/underscore.v1-5-2',
          'backbone':                       'js/vendor/backbone.v1-1-0',
          'backbone.relational':            'js/lib/backbone.relational.0.8.6',
          'i18n':                           'js/lib/i18n._t',
          'css':                            'js/vendor/require.css.v0-1-2',
          'memoize':                        'js/lib/require.memoize.v0-0-1',
          'pages/spark/models/user.json':   'empty:',
          'pages/spark/models/course.json': 'empty:',
          'pages/spark/models/navbar.json': 'empty:'
       },
       callback: function() {
                    require(['pages/spark/routes']);
                },
       config: {
         i18n: {
           locale: (window.localStorage ? localStorage.getItem('locale') : '') || el.getAttribute('data-locale')
         }
       }
     });
  })(document.getElementById('_require'));
}
</script><script>define('pages/spark/models/user.json', [], function(){
      return JSON.parse("{\"id\":8585290,\"email_address\":\"pmengguan@gmail.com\",\"full_name\":\"Pan Mengguan\",\"locale\":null,\"timezone\":\"America\\\/Los_Angeles\",\"access_group_id\":\"4\",\"registration_time\":\"1439650159\",\"last_access_time\":\"1443830283\",\"last_access_ip\":\"36.63.41.204\",\"signature_track_register_time\":\"0\",\"email_announcement\":\"1\",\"email_forum\":\"1\",\"in_signature_track\":\"0\",\"wishes_proctored_exam\":\"0\",\"first_name\":\"Pan\",\"permissions\":[\"default\",\"allow_site_access\"],\"group\":\"Student\",\"anonymous\":false,\"forum_title\":\"Student\",\"signature_track_state\":1,\"verified_quizzes\":[],\"submitted_quizzes\":[\"90\",\"131\"],\"scheduled_proctored_exam\":null,\"last_chance_modal\":null,\"flexjoin_last_chance_modal\":null}");
  });
define('pages/spark/models/course.json', [], function(){
      return JSON.parse("{\"id\":976149,\"isPrivate\":false,\"type\":\"public\",\"name\":\"Algorithms, Part I\",\"instructor\":\"Kevin Wayne, Robert Sedgewick\",\"sessionName\":\"algs4partI-009\",\"externalBaseURL\":\"https:\\\/\\\/www.coursera.org\\\/\",\"shortname\":\"algs4partI\",\"host\":\"https:\\\/\\\/www.coursera.org\\\/\",\"assetUnversionedLink\":\"https:\\\/\\\/dw0ugk4msqulk.cloudfront.net\\\/\",\"cheggID\":\"\",\"hasLTI\":true,\"badgevilleDomain\":\"\",\"linkable\":false,\"universityShortname\":\"princeton\",\"signatureTrackStatus\":{\"signature_track_enabled\":0},\"courseURLs\":{\"log_in_link\":\"https:\\\/\\\/www.coursera.org\\\/login?post_redirect=https%3A%2F%2Fwww.coursera.org%2Flogin%3Fuser_action%3Dclass%26course_id%3D976149%26post_redirect%3Dhttps%253A%252F%252Fclass.coursera.org%252Falgs4partI-009%252Fauth%252Fauth_redirector%253Ftype%253Dlogin%2526subtype%253Dnormal%2526visiting%253D\",\"sign_up_link\":\"https:\\\/\\\/www.coursera.org\\\/signup?enroll_cid=976149&enroll_sn=algs4partI&enroll_n=Algorithms, Part I\",\"view_course_info_link\":\"https:\\\/\\\/www.coursera.org\\\/course\\\/algs4partI\",\"sign_up_link_cant_enroll\":\"https:\\\/\\\/www.coursera.org\\\/signup?post_redirect=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Falgs4partI\"},\"courseBase\":\"https:\\\/\\\/class.coursera.org\\\/algs4partI-009\\\/\",\"search\":true,\"hideWiki\":true,\"aceStartRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceEndRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamStartDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamEndDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamRules\":\"\",\"aceExamDuration\":\"\",\"aceBeforeExam\":false,\"aceAfterExam\":true,\"aceHours\":null,\"aceCreditType\":\"\",\"acePrice\":null,\"aceExamID\":null,\"aceEligible\":false,\"canRegisterForACE\":false,\"specialization\":null,\"supportForums\":true,\"textbooks\":\"\",\"inVideoQuizV2\":false,\"in_flexjoin\":0,\"honorCodeExtraText\":\"I will not to post solutions or partial solutions to the programming assignments publicly (e.g., in the discussion forums or in public code repositories such as GitHub).\",\"honorCodeCustomTitle\":\"\",\"honorCodeCustomButton\":\"\",\"studentAccessDisabled\":0,\"disableQQs\":false}");
  });
  define('pages/spark/models/navbar.json', [], function(){
      return JSON.parse("{\"items\":[{\"name\":\"Home\",\"icon\":\"home\",\"link_type\":\"circuit\",\"link_data\":\"class:index\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Syllabus\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=syllabus\"},{\"name\":\"Schedule\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=schedule\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Lectures\",\"icon\":\"lecture\",\"link_type\":\"circuit\",\"link_data\":\"lecture:index\"},{\"name\":\"Exercises\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index\"},{\"name\":\"Programming Assignments\",\"icon\":\"assignment\",\"link_type\":\"circuit\",\"link_data\":\"assignment:index\"},{\"name\":\"Job Interview Questions\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=homework\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Discussion Forums\",\"icon\":\"forum\",\"link_type\":\"circuit\",\"link_data\":\"forum:index\"},{\"name\":\"Google+ Hangouts\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=ScheduleGoogleHangouts\"},{\"name\":\"Errata\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=errata\"},{\"name\":\"Surveys\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=survey\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Booksite\",\"icon\":\"wiki\",\"link_type\":\"window_link\",\"link_data\":\"http:\\\/\\\/algs4.cs.princeton.edu\"}]}");
  });
</script><script>var coursera_enable_new_help_center = true;
</script><div class="hide confirm-navigation modal"><div class="modal-header"><h3>Confirm Navigation</h3></div><div class="modal-body"><div class="confirm-navigation-message"></div><div>Are you sure you want to leave this page?</div></div><div class="modal-footer"><button data-modal-close="data-modal-close" class="btn confirm-navigation-stay">Stay on this Page</button><button data-modal-close="data-modal-close" class="btn btn-danger confirm-navigation-leave">Leave this Page</button></div></div><div style="display: none;" class="coursera-async-message"></div></body></html>
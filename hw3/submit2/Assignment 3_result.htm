<!DOCTYPE html>
<html class="supports-svg" xmlns:fb="http://ogp.me/ns/fb#" itemtype="http://schema.org"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=IE7"><meta name="fragment" content="!"><meta name="robots" content="NOODP"><meta charset="utf-8"><meta property="og:title" content="Coursera"><meta property="og:type" content="website"><meta property="og:image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta property="og:url" content="https://www.coursera.org/assignment/part_results?part_id=7"><meta property="og:site_name" content="Coursera"><meta property="og:locale" content="en_US"><meta property="og:description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta property="fb:admins" content="727836538,4807654"><meta property="fb:app_id" content="274998519252278"><meta name="twitter:site" content="Coursera"><meta name="twitter:app:name:iphone" content="Coursera"><meta name="twitter:app:name:ipad" content="Coursera"><meta name="twitter:app:name:googleplay" content="Coursera"><meta name="twitter:app:id:iphone" content="id736535961"><meta name="twitter:app:id:ipad" content="id736535961"><meta name="twitter:app:id:googleplay" content="org.coursera.android"><meta name="description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta name="image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta name="apple-itunes-app" content="app-id=736535961"><title>Coursera</title>    <link href="Assignment%203_result_files/spark.css" rel="stylesheet" type="text/css">
      <link href="Assignment%203_result_files/course.css" rel="stylesheet" type="text/css">
    <link href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico" rel="icon">
<script src="Assignment%203_result_files/ga.js" async="" type="text/javascript"></script><script src="Assignment%203_result_files/b5m.js" charset="utf-8" id="b5mmain" type="text/javascript"></script><script src="Assignment%203_result_files/routes.js" data-requiremodule="pages/spark/routes" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><meta content="summary" name="twitter:card"><meta content="Coursera" name="twitter:title"><meta content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits." name="twitter:description"><meta content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png" name="twitter:image:src"><script src="Assignment%203_result_files/204.js" data-requiremodule="js/lib/204" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/400.js" data-requiremodule="js/lib/400" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/student-page.js" data-requiremodule="pages/spark/views/template/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/student-page_003.js" data-requiremodule="pages/spark/views/template/student-page.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/sparkSurveyQuestionsSessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/sparkSurveyQuestions/sparkSurveyQuestionsSessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/sessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/quickQuestions/sessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/student-page_002.js" data-requiremodule="pages/spark/views/template/nls/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/SessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/SessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/QuestionCollection.js" data-requiremodule="bundles/assess/framework/QuestionCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/QuestionModel.js" data-requiremodule="bundles/assess/framework/QuestionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/backbone.js" data-requiremodule="bundles/assess/lib/backbone.hascollections" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/underscore.js" data-requiremodule="js/lib/underscore.extend" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/header_003.js" data-requiremodule="pages/spark/views/template/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/sidebar.js" data-requiremodule="pages/spark/views/template/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/readme.js" data-requiremodule="js/lib/readme" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/header_002.js" data-requiremodule="pages/spark/views/template/header.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/LearnerStoriesCollection.js" data-requiremodule="pages/analytics/models/LearnerStoriesCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/assessApi.js" data-requiremodule="pages/spark-survey/assessApi" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/sidebar_002.js" data-requiremodule="pages/spark/views/template/sidebar.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/signature_track.js" data-requiremodule="spark/app/signature/js/signature_track" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/header.js" data-requiremodule="pages/spark/views/template/nls/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/LearnerStoryModel.js" data-requiremodule="pages/analytics/models/LearnerStoryModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/sidebar_003.js" data-requiremodule="pages/spark/views/template/nls/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/signatureTrackLastChanceModal.js" data-requiremodule="spark/app/signature/js/signatureTrackLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/flexjoinLastChanceModal.js" data-requiremodule="spark/app/signature/js/flexjoinLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/util.js" data-requiremodule="js/lib/util" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%203_result_files/path.js" data-requiremodule="js/lib/path" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script></head><body><div id="fb-root"></div><div id="spark-help" class="hide"></div><a href="https://learner.coursera.help/hc/requests/new" target="_blank"><div style="z-index: 1" data-networkprioritysupportwidget="" role="button" class="helpwidget-tab hide">Premium Support</div></a><!-- - track IE8 and less browser for eventing purposes--><!--[if lte IE 8]><script>window._204 = window._204 || [];
window._gaq = window._gaq || [];
window._gaq.push(
    ['_setAccount', 'UA-28377374-1'],
    ['_setDomainName', window.location.hostname],
    ['_setAllowLinker', true],
    ['_trackPageview', window.location.pathname]);
window._204.push(
  ['client', 'home'],
  {key:"pageview", value:window.location.pathname});</script><script src="https://dw0ugk4msqulk.cloudfront.net/ebfbef57ce42b5989d5da36106da956cf9ffed2c/js/lib/204.js"></script><script src="https://ssl.google-analytics.com/ga.js"></script><![endif]--><div id="fb-root"></div><div id="origami" data-js="origami"><div><div><div class="coursera-page"><div class="coursera-header" role="menubar"><div class="hidden">This page features MathJax technology to render mathematical formulae.
If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.</div><h1 class="hidden">Algorithms, Part I</h1><!-- UNTIL dashboard announcement expires 2014-12-01 (then delete this code)--><div class="helpcenter-announcement"><div style="visibility: visible; display: none;" class="readme" data-readme="helpcenter-announcement" data-readme-show-count="1" data-readme-show-until-closed="data-readme-show-until-closed" data-readme-expires="Mar 31, 2015"><div>Need technical help? Visit our new <a href="https://learner.coursera.help/" data-readme-close="data-readme-close">Learner Help Center!</a></div><div data-readme-close="data-readme-close" class="readme-close-icon"><span class="icon-remove"></span></div></div></div><div role="banner" class="course-topbar container-fluid"><div class="row-fluid"><div class="span3"><a href="https://www.coursera.org/" data-if-linkable="add-referrer" class="course-topbar-logo"></a></div><div style="float:right;" class="course-topbar-nav-container span9"><h2 class="hidden">Top Navigation Bar</h2><ul class="course-topbar-nav-list"><li class="course-topbar-nav-list-item"><a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a></li><li tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="data-popup-close" style="cursor:pointer;" data-popup-direction="se" class="course-topbar-nav-list-item"><a data-user-id="8585290">Pan Mengguan<i class="icon-caret-down"></i></a></li></ul></div></div><div id="course-topbar-aboutus" class="course-topbar-sublist"><a href="https://www.coursera.org//about/" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">About Us</a><a href="https://www.coursera.org//about/careers" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Careers</a><a href="https://www.coursera.org//about/people" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">People</a><a href="https://www.coursera.org//about/contact" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Contact Us</a></div><div id="course-topbar-my" class="course-topbar-sublist"><a data-popup-close="data-popup-close" href="https://www.coursera.org/" target="_new" class="course-topbar-sublist-item">My Courses</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/profile" target="_new" class="course-topbar-sublist-item">Profile</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/accomplishments" target="_new" class="course-topbar-sublist-item">Course Records</a><a href="https://www.coursera.org/account/settings" target="_new" class="course-topbar-sublist-item">Settings</a><a href="https://class.coursera.org/algs4partI-009/class/preferences" class="course-topbar-sublist-item">Course Preferences</a><form action="/api/logoutSsr/v1?csrf3-token=1444694240.LcNmz85YHE6fh6SJ" method="post"><button data-popup-close="data-popup-close" type="submit" class="course-topbar-sublist-item">Sign Out</button></form></div></div><div class="course-topbanner-wrapper"><div class="course-topbanner"><div class="course-topbanner-university-logo"><a href="https://www.coursera.org/princeton" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/princeton" class="coursera-university-color"><img src="Assignment%203_result_files/university_logo.png" alt="princeton"></a></div><h1 class="course-topbanner-header"><a href="https://class.coursera.org/algs4partI-009/" data-if-linkable="modal-lock" class="course-topbanner-name coursera-university-color">Algorithms, Part I</a><br><span style="" class="course-topbanner-instructor">by Kevin Wayne, Robert Sedgewick</span></h1></div></div></div><div style="position:relative;" class="container-fluid"><div class="row-fluid"><div id="course-page-sidebar" role="navigation"><div class="coursera-sidebar" role="menubar"><div id="course-page-sidebar" role="navigation"><div class="course-navbar-container"><a href="https://class.coursera.org/algs4partI-009" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_index"><img src="Assignment%203_result_files/logo.png" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page"></a><div data-coursera-course-search-nav-widget="data-coursera-course-search-nav-widget" class="input-append course-search-nav-box"><form method="get" action="/algs4partI-009/class/search" data-js-search-form="data-js-search-form" class="form-inline minimized-search"><label for="course-search-nav-input" class="accessible-text-for-reader">Search this course</label><input id="course-search-nav-input" name="q" data-js-search-input="data-js-search-input" type="text">&nbsp;<button type="submit" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="search" class="btn icon-search"><span class="accessible-text-for-reader">Search</span></button></form></div><h2 class="hidden">Side Navigation Bar</h2><ul class="course-navbar-list"><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/class/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Home" class="coursera-university-color"><span>Home </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Syllabus" class="coursera-university-color"><span>Syllabus </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Schedule" class="coursera-university-color"><span>Schedule </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Lectures" class="coursera-university-color"><span>Lectures </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Exercises" class="coursera-university-color"><span>Exercises </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Programming_Assignments" class="coursera-university-color"><span>Programming Assignments </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Job_Interview_Questions" class="coursera-university-color"><span>Job Interview Questions </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/forum/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Discussion_Forums" class="coursera-university-color"><span>Discussion Forums </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=ScheduleGoogleHangouts" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Google+_Hangouts" class="coursera-university-color"><span>Google+ Hangouts </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Errata" class="coursera-university-color"><span>Errata </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-009/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Surveys" class="coursera-university-color"><span>Surveys </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Booksite" class="coursera-university-color"><span>Booksite </span><span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="https://accounts.coursera.org/i/zendesk/courserahelp?return_to=https://learner.coursera.help/hc/" target="_blank" title="Open help articles in new window" class="coursera-university-color"><i class="icon-question-sign"></i>Help Center</a></li></ul><ul style="list-style-type:none;margin-left: 10px;"></ul></div></div></div></div><div id="course-page-content" role="main"><div style="display: block;" id="spark" class="hide"><h2 class="course-page-header">Programming Assignment 3:  Collinear Points | collinear.zip
  <a class="coursera-reporter-link" title="Click here if you're experiencing technical problems or found errors in the course materials." target="_blank" href="https://accounts.coursera.org/i/zendesk/courserahelp?return_to=https://learner.coursera.help/hc/articles/201212249-Programming-Assignments">
     Help Center
  </a>
</h2>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sun-04-Oct 01:34:25</td></tr>
        <tr><td>Raw Score</td><td>92.44 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#109900">37/41 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#079900">39/41 tests passed</font>

Aggregate score: <font color="#0C9900">92.44%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.6K Oct  4 08:34 BruteCollinearPoints.java
-rw-r--r-- 1 2.9K Oct  4 08:34 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 08:34 Point.java
-rw-r--r-- 1 3.0K Oct  4 08:34 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==&gt; passed


Total: 17/17 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (9, 1) -&gt; (9, 9)
     -  reference segment 0: (9, 0) -&gt; (9, 1) -&gt; (9, 4) -&gt; (9, 5) -&gt; (9, 9)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (9, 1) -&gt; (9, 9)

     -  failed on trial 139 of 500
     10
         4     7
         9     0
         7     2
         8     1
         9     9
         9     5
         3     3
         9     1
         9     4
         4     1

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 1) -&gt; (7, 1)
     -  segment 5: (0, 1) -&gt; (7, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 13: (6, 2) -&gt; (6, 8)
     -  reference segment 38: (6, 1) -&gt; (6, 2) -&gt; (6, 3) -&gt; (6, 4) -&gt; (6, 6) -&gt; (6, 7) -&gt; (6, 8)

     -  student   solution has 84 non-null entries
     -  reference solution has 42 non-null entries
     -  42 extra entries in student solution, including: (0, 8) -&gt; (9, 8)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 20: (0, 1) -&gt; (9, 1)
     -  segment 24: (0, 1) -&gt; (9, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 13: (6, 0) -&gt; (1, 5)
     -  reference segment 23: (6, 0) -&gt; (5, 1) -&gt; (4, 2) -&gt; (3, 3) -&gt; (2, 4) -&gt; (1, 5) -&gt; (0, 6)

     -  student   solution has 308 non-null entries
     -  reference solution has 123 non-null entries
     -  185 extra entries in student solution, including: (2, 9) -&gt; (8, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 12: (19, 1) -&gt; (47, 29)
     -  segment 26: (19, 1) -&gt; (47, 29)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 35: (15, 1) -&gt; (15, 44)
     -  reference segment 199: (15, 1) -&gt; (15, 7) -&gt; (15, 15) -&gt; (15, 21) -&gt; (15, 40) -&gt; (15, 44) -&gt; (15, 45)

     -  student   solution has 361 non-null entries
     -  reference solution has 217 non-null entries
     -  144 extra entries in student solution, including: (3, 45) -&gt; (49, 45)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 5: (0, 1) -&gt; (4, 1)
     -  segment 7: (0, 1) -&gt; (4, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 19: (1, 3) -&gt; (4, 3)
     -  reference segment 6: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 16: (9, 0) -&gt; (0, 9)
     -  segment 21: (9, 0) -&gt; (0, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 29: (9, 4) -&gt; (3, 7)
     -  reference segment 55: (9, 4) -&gt; (7, 5) -&gt; (5, 6) -&gt; (3, 7) -&gt; (1, 8)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (2, 9) -&gt; (8, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 92: (0, 8) -&gt; (19, 8)
     -  segment 122: (0, 8) -&gt; (19, 8)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 73: (3, 3) -&gt; (13, 18)
     -  reference segment 1982: (1, 0) -&gt; (3, 3) -&gt; (5, 6) -&gt; (7, 9) -&gt; (9, 12) -&gt; (11, 15) -&gt; (13, 18)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (2, 19) -&gt; (16, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 0) -&gt; (4, 0)
     -  segment 8: (0, 0) -&gt; (4, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 5: (1, 2) -&gt; (4, 2)
     -  reference segment 4: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (1, 3) -&gt; (4, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 3) -&gt; (5, 3)
     -  segment 6: (0, 3) -&gt; (5, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 8: (0, 2) -&gt; (4, 2)
     -  reference segment 5: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 3) -&gt; (9, 3)
     -  segment 17: (0, 3) -&gt; (9, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 31: (1, 1) -&gt; (9, 1)
     -  reference segment 13: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (2, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 9: (0, 2) -&gt; (14, 2)
     -  segment 17: (0, 2) -&gt; (14, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 43: (0, 3) -&gt; (13, 3)
     -  reference segment 33: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (5, 3) -&gt; (13, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 3) -&gt; (24, 3)
     -  segment 26: (0, 3) -&gt; (24, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 97: (1, 3) -&gt; (24, 3)
     -  reference segment 95: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (2, 3) -&gt; (24, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==&gt; passed


Total: 17/21 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02        8448           0           8448                  616         
=&gt; passed    32   0.01       66560           0          66560                 2512         
=&gt; passed    64   0.02      528384           0         528384                10144         
=&gt; passed   128   0.06     4210688           0        4210688                40768         
=&gt; passed   256   0.49    33619968           0       33619968               163456         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        9984           0           9984                 1240         
=&gt; passed    32   0.00       72704           0          72704                 3760         
=&gt; passed    64   0.01      552960           0         552960                12640         
=&gt; passed   128   0.06     4308992           0        4308992                45760         
=&gt; passed   256   0.49    34013184           0       34013184               173440         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.03           0       12152          24304                 4032         
=&gt; passed   128   0.01           0       57142         114284                16256         
=&gt; passed   256   0.03           0      261872         523744                65280         
=&gt; passed   512   0.10           0     1179468        2358936               261632         
=&gt; passed  1024   0.50           0     5247303       10494606              1047552         
=&gt; passed  2048   1.02           0    23097172       46194344              4192256         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46194344 / 10494606) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                12558         
=&gt; passed   128   0.01           0       16128          32256                57852         
=&gt; passed   256   0.02           0       65024         130048               263486         
=&gt; passed   512   0.10           0      261120         522240              1179863         
=&gt; passed  1024   0.46           0     1046528        2093056              5250621         
=&gt; <font color="#990000"><b>FAILED</b></font>  2048   0.68           0     4190208        8380416             23105868   (1.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>  4096   2.36           0    16769024       33538048            100749778   (1.2x)
==&gt; 5/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 6/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11437          22874                 5733         
=&gt; passed   128   0.00           0       53710         107420                24749         
=&gt; passed   256   0.01           0      244068         488136               106353         
=&gt; passed   512   0.06           0     1090561        2181122               457124         
=&gt; passed  1024   0.24           0     4793508        9587016              1955892         
=&gt; passed  2048   0.98           0    20840249       41680498              8341248         
=&gt; passed  4096   4.24           0    90005842      180011684             35453128         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180011684 / 41680498) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11474          22948                 5532         
=&gt; passed   128   0.00           0       54239         108478                22937         
=&gt; passed   256   0.01           0      249483         498966                94988         
=&gt; passed   512   0.05           0     1122893        2245786               395636         
=&gt; passed  1024   0.23           0     4977497        9954994              1643287         
=&gt; passed  2048   1.02           0    21818917       43637834              6831421         
=&gt; passed  4096   4.36           0    94801801      189603602             28363875         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189603602 / 43637834) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 29/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-03-Oct 20:33:39</td></tr>
        <tr><td>Raw Score</td><td>88.90 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#1F9900">34/41 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#139900">88.90%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.6K Oct  4 03:33 BruteCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:33 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:33 Point.java
-rw-r--r-- 1 2.9K Oct  4 03:33 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
  *  25 points
  *  5 points
  *  4 points
  *  3 points
  *  2 points
==&gt; passed


Total: 17/17 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 3) -&gt; (9, 3)
     -  segment 1: (0, 3) -&gt; (9, 3)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (0, 3) -&gt; (9, 3)

     -  failed on trial 46 of 500
     10
         5     9
         8     1
         7     3
         0     3
         8     5
         1     3
         6     3
         9     0
         3     9
         9     3

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 4: (0, 1) -&gt; (7, 1)
     -  segment 17: (0, 1) -&gt; (7, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 13: (2, 2) -&gt; (9, 9)
     -  reference segment 22: (1, 1) -&gt; (2, 2) -&gt; (3, 3) -&gt; (4, 4) -&gt; (5, 5) -&gt; (9, 9)

     -  student   solution has 76 non-null entries
     -  reference solution has 40 non-null entries
     -  36 extra entries in student solution, including: (5, 9) -&gt; (9, 9)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 6: (6, 0) -&gt; (6, 9)
     -  segment 39: (6, 0) -&gt; (6, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 26: (1, 6) -&gt; (9, 6)
     -  reference segment 67: (0, 6) -&gt; (1, 6) -&gt; (2, 6) -&gt; (3, 6) -&gt; (4, 6) -&gt; (5, 6) -&gt; (6, 6) -&gt; (7, 6) -&gt; (8, 6) -&gt; (9, 6)

     -  student   solution has 316 non-null entries
     -  reference solution has 135 non-null entries
     -  181 extra entries in student solution, including: (1, 9) -&gt; (9, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 10: (11, 37) -&gt; (49, 37)
     -  segment 23: (11, 37) -&gt; (49, 37)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 74: (2, 18) -&gt; (12, 48)
     -  reference segment 192: (0, 12) -&gt; (2, 18) -&gt; (5, 27) -&gt; (7, 33) -&gt; (9, 39) -&gt; (12, 48)

     -  student   solution has 349 non-null entries
     -  reference solution has 229 non-null entries
     -  120 extra entries in student solution, including: (4, 49) -&gt; (28, 49)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 0) -&gt; (4, 4)
     -  segment 5: (0, 0) -&gt; (4, 4)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 20: (1, 4) -&gt; (4, 4)
     -  reference segment 7: (0, 4) -&gt; (1, 4) -&gt; (2, 4) -&gt; (3, 4) -&gt; (4, 4)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (1, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 7: (8, 0) -&gt; (8, 9)
     -  segment 27: (8, 0) -&gt; (8, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 29: (8, 2) -&gt; (5, 8)
     -  reference segment 19: (9, 0) -&gt; (8, 2) -&gt; (7, 4) -&gt; (6, 6) -&gt; (5, 8)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (0, 9) -&gt; (9, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 68: (0, 4) -&gt; (15, 19)
     -  segment 131: (0, 4) -&gt; (15, 19)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 238: (19, 3) -&gt; (7, 6)
     -  reference segment 1031: (19, 3) -&gt; (15, 4) -&gt; (11, 5) -&gt; (7, 6) -&gt; (3, 7)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (0, 19) -&gt; (19, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 2) -&gt; (4, 2)
     -  segment 3: (0, 2) -&gt; (4, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 16: (1, 1) -&gt; (4, 1)
     -  reference segment 3: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (4, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 0) -&gt; (5, 0)
     -  segment 5: (0, 0) -&gt; (5, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 8: (0, 1) -&gt; (4, 1)
     -  reference segment 4: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 7: (0, 1) -&gt; (9, 1)
     -  segment 12: (0, 1) -&gt; (9, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 30: (1, 0) -&gt; (9, 0)
     -  reference segment 12: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0) -&gt; (5, 0) -&gt; (6, 0) -&gt; (7, 0) -&gt; (8, 0) -&gt; (9, 0)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (4, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 9: (0, 0) -&gt; (14, 0)
     -  segment 21: (0, 0) -&gt; (14, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 34: (1, 3) -&gt; (14, 3)
     -  reference segment 33: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (2, 3) -&gt; (14, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 17: (1, 3) -&gt; (24, 3)
     -  segment 31: (1, 3) -&gt; (24, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 17: (1, 3) -&gt; (24, 3)
     -  reference segment 95: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (5, 3) -&gt; (24, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 5 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 6 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 6
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
     21670 14580
     21709 26690
     17364 23012
     14271  6621
     21709 26690

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
     29945 14256
     23151 14027
      6979 28580
      6979 28580

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     17604  6062
     17593 21787
     17593 21787

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
     12044 16919
     12044 16919

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/21 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02        8448           0           8448                  616         
=&gt; passed    32   0.01       66560           0          66560                 2512         
=&gt; passed    64   0.02      528384           0         528384                10144         
=&gt; passed   128   0.09     4210688           0        4210688                40768         
=&gt; passed   256   0.49    33619968           0       33619968               163456         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        9984           0           9984                 1240         
=&gt; passed    32   0.01       72704           0          72704                 3760         
=&gt; passed    64   0.04      552960           0         552960                12640         
=&gt; passed   128   0.06     4308992           0        4308992                45760         
=&gt; passed   256   0.49    34013184           0       34013184               173440         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.02           0       12158          24316                    0         
=&gt; passed   128   0.01           0       57135         114270                    0         
=&gt; passed   256   0.03           0      261851         523702                    0         
=&gt; passed   512   0.15           0     1179749        2359498                    0         
=&gt; passed  1024   0.42           0     5246742       10493484                    0         
=&gt; passed  2048   1.00           0    23093047       46186094                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46186094 / 10493484) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8470         
=&gt; passed   128   0.01           0       16128          32256                41711         
=&gt; passed   256   0.02           0       65024         130048               198220         
=&gt; passed   512   0.10           0      261120         522240               921577         
=&gt; passed  1024   0.42           0     1046528        2093056              4201811         
=&gt; passed  2048   0.58           0     4190208        8380416             18889349         
=&gt; passed  4096   2.20           0    16769024       33538048             83990259         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11424          22848                 1694         
=&gt; passed   128   0.00           0       53640         107280                 8468         
=&gt; passed   256   0.01           0      244688         489376                41228         
=&gt; passed   512   0.05           0     1091575        2183150               195145         
=&gt; passed  1024   0.21           0     4792833        9585666               911130         
=&gt; passed  2048   0.94           0    20850435       41700870              4148174         
=&gt; passed  4096   4.07           0    90009140      180018280             18686446         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180018280 / 41700870) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11484          22968                 1477         
=&gt; passed   128   0.00           0       54247         108494                 6611         
=&gt; passed   256   0.01           0      249631         499262                29653         
=&gt; passed   512   0.05           0     1122390        2244780               134068         
=&gt; passed  1024   0.22           0     4977262        9954524               595246         
=&gt; passed  2048   0.98           0    21813117       43626234              2639469         
=&gt; passed  4096   4.23           0    94811993      189623986             11584647         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189623986 / 43626234) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-03-Oct 20:26:34</td></tr>
        <tr><td>Raw Score</td><td>87.32 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#259900">33/41 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#169900">87.32%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.4K Oct  4 03:27 BruteCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:27 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:27 Point.java
-rw-r--r-- 1 2.9K Oct  4 03:27 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
BruteCollinearPoints.java:7:1: Do not import 'javax.sound.sampled.Line' on COS 226 programming assignments.
BruteCollinearPoints.java:7:8: Unused import statement for 'javax.sound.sampled.Line'.
Checkstyle ends with 2 errors.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
     15208 26009
     26107 24358
      7196 13479
     32377 24195
      7196 13479

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
     25739  5212
     24680 25445
     25739  5212
      7673 20775

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     10720 10144
     19193 30750
     10720 10144

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
      7739 21710
      7739 21710

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 16/17 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (0, 5) -&gt; (6, 5)
     -  reference segment 0: (0, 5) -&gt; (2, 5) -&gt; (3, 5) -&gt; (6, 5) -&gt; (9, 5)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (0, 5) -&gt; (6, 5)

     -  failed on trial 102 of 500
     10
         2     8
         9     5
         2     5
         3     5
         0     2
         8     9
         9     2
         2     3
         0     5
         6     5

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 5: (2, 0) -&gt; (2, 8)
     -  segment 10: (2, 0) -&gt; (2, 8)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 22: (7, 1) -&gt; (7, 5)
     -  reference segment 43: (7, 1) -&gt; (7, 3) -&gt; (7, 4) -&gt; (7, 5) -&gt; (7, 9)

     -  student   solution has 80 non-null entries
     -  reference solution has 46 non-null entries
     -  34 extra entries in student solution, including: (3, 9) -&gt; (8, 9)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 14: (1, 8) -&gt; (9, 8)
     -  segment 29: (1, 8) -&gt; (9, 8)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 14: (1, 8) -&gt; (9, 8)
     -  reference segment 62: (0, 8) -&gt; (1, 8) -&gt; (2, 8) -&gt; (3, 8) -&gt; (4, 8) -&gt; (5, 8) -&gt; (7, 8) -&gt; (9, 8)

     -  student   solution has 310 non-null entries
     -  reference solution has 127 non-null entries
     -  183 extra entries in student solution, including: (1, 9) -&gt; (7, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 17: (34, 12) -&gt; (0, 46)
     -  segment 43: (34, 12) -&gt; (0, 46)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 60: (34, 12) -&gt; (9, 37)
     -  reference segment 39: (34, 12) -&gt; (32, 14) -&gt; (31, 15) -&gt; (29, 17) -&gt; (9, 37) -&gt; (3, 43) -&gt; (0, 46)

     -  student   solution has 361 non-null entries
     -  reference solution has 224 non-null entries
     -  137 extra entries in student solution, including: (10, 49) -&gt; (24, 49)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 2) -&gt; (4, 2)
     -  segment 8: (0, 2) -&gt; (4, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 25: (0, 1) -&gt; (3, 1)
     -  reference segment 4: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 1: (9, 1) -&gt; (1, 9)
     -  segment 9: (9, 1) -&gt; (1, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 96: (0, 3) -&gt; (5, 8)
     -  reference segment 113: (0, 3) -&gt; (1, 4) -&gt; (2, 5) -&gt; (3, 6) -&gt; (4, 7) -&gt; (5, 8) -&gt; (6, 9)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (1, 9) -&gt; (9, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 21: (9, 2) -&gt; (19, 17)
     -  segment 43: (9, 2) -&gt; (19, 17)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 66: (2, 4) -&gt; (14, 12)
     -  reference segment 1671: (2, 4) -&gt; (5, 6) -&gt; (8, 8) -&gt; (11, 10) -&gt; (14, 12) -&gt; (17, 14)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (1, 19) -&gt; (19, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 1) -&gt; (4, 1)
     -  segment 8: (0, 1) -&gt; (4, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (0, 2) -&gt; (3, 2)
     -  reference segment 4: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (4, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 0) -&gt; (5, 0)
     -  segment 14: (0, 0) -&gt; (5, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 8: (0, 2) -&gt; (4, 2)
     -  reference segment 5: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (4, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 7: (0, 3) -&gt; (9, 3)
     -  segment 9: (0, 3) -&gt; (9, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 35: (0, 1) -&gt; (8, 1)
     -  reference segment 13: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (0, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 7: (0, 2) -&gt; (13, 2)
     -  segment 25: (0, 2) -&gt; (13, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (0, 2) -&gt; (13, 2)
     -  reference segment 32: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (1, 3) -&gt; (14, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 5: (0, 3) -&gt; (24, 3)
     -  segment 19: (0, 3) -&gt; (24, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 42: (1, 2) -&gt; (24, 2)
     -  reference segment 94: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2) -&gt; (15, 2) -&gt; (16, 2) -&gt; (17, 2) -&gt; (18, 2) -&gt; (19, 2) -&gt; (20, 2) -&gt; (21, 2) -&gt; (22, 2) -&gt; (23, 2) -&gt; (24, 2)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (5, 3) -&gt; (20, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 5 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          collinear.numberOfSegments() -&gt; 0
          mutate points[] array that was passed to constructor
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 6 operations involving FastCollinearPoints
     -  first call to student numberOfSegments() = 4
     -  last  call to student numberOfSegments() = 0
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 4
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -&gt; 0
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 6
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
     22482 12558
      5518 21445
     32752  2355
     32752  2355
      4262 29315

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
     30604 26701
      5949  3695
      5949  3695
     17534  2741

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
       344  4773
     22393 12159
       344  4773

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
     17590  4587
     17590  4587

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/21 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02        8448           0           8448                  376         
=&gt; passed    32   0.01       66560           0          66560                 1520         
=&gt; passed    64   0.01      528384           0         528384                 6112         
=&gt; passed   128   0.06     4210688           0        4210688                24512         
=&gt; passed   256   0.52    33619968           0       33619968                98176         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        9984           0           9984                 1000         
=&gt; passed    32   0.00       72704           0          72704                 2768         
=&gt; passed    64   0.01      552960           0         552960                 8608         
=&gt; passed   128   0.06     4308992           0        4308992                29504         
=&gt; passed   256   0.49    34014720           0       34014720               108189         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.02           0       12159          24318                    0         
=&gt; passed   128   0.01           0       57174         114348                    0         
=&gt; passed   256   0.03           0      261842         523684                    0         
=&gt; passed   512   0.11           0     1180256        2360512                    0         
=&gt; passed  1024   0.49           0     5246802       10493604                    0         
=&gt; passed  2048   0.97           0    23089173       46178346                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46178346 / 10493604) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8436         
=&gt; passed   128   0.01           0       16128          32256                41838         
=&gt; passed   256   0.02           0       65024         130048               198449         
=&gt; passed   512   0.10           0      261120         522240               921682         
=&gt; passed  1024   0.44           0     1046528        2093056              4205831         
=&gt; passed  2048   0.67           0     4190208        8380416             18901814         
=&gt; passed  4096   2.22           0    16769024       33538048             84038497         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11420          22840                 1701         
=&gt; passed   128   0.00           0       53596         107192                 8518         
=&gt; passed   256   0.01           0      244534         489068                41242         
=&gt; passed   512   0.05           0     1091991        2183982               195409         
=&gt; passed  1024   0.21           0     4792803        9585606               909529         
=&gt; passed  2048   0.93           0    20848620       41697240              4151245         
=&gt; passed  4096   4.07           0    90021746      180043492             18690267         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180043492 / 41697240) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11519          23038                 1480         
=&gt; passed   128   0.00           0       54230         108460                 6690         
=&gt; passed   256   0.01           0      249547         499094                29783         
=&gt; passed   512   0.05           0     1123265        2246530               133412         
=&gt; passed  1024   0.22           0     4977785        9955570               596826         
=&gt; passed  2048   0.96           0    21815402       43630804              2639671         
=&gt; passed  4096   4.22           0    94803990      189607980             11594107         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189607980 / 43630804) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-03-Oct 20:20:04</td></tr>
        <tr><td>Raw Score</td><td>84.15 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#319900">31/41 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#1C9900">84.15%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.3K Oct  4 03:20 BruteCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:20 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  4 03:20 Point.java
-rw-r--r-- 1 2.9K Oct  4 03:20 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
BruteCollinearPoints.java:7:8: Unused import statement for 'java.util.Arrays'.
FastCollinearPoints.java:7:1: Do not import 'javax.sound.sampled.Line' on COS 226 programming assignments.
FastCollinearPoints.java:7:8: Unused import statement for 'javax.sound.sampled.Line'.
Checkstyle ends with 3 errors.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 5 operations involving BruteCollinearPoints
     -  first call to student numberOfSegments() = 2
     -  last  call to student numberOfSegments() = 0
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          collinear.numberOfSegments() -&gt; 0
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 10 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 0
          collinear.numberOfSegments() -&gt; 0
          collinear.numberOfSegments() -&gt; 0
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 6
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
     20164 18949
      2024 11550
      9883  5012
      2536 12519
      2536 12519

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
     21592 19751
     22578 16330
     18046 10708
     21592 19751

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     13867 24940
     21351 29949
     21351 29949

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
      9064 11598
      9064 11598

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/17 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 6) -&gt; (6, 6)
     -  segment 1: (0, 6) -&gt; (6, 6)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (0, 6) -&gt; (6, 6)

     -  failed on trial 86 of 500
     10
         5     6
         5     2
         6     4
         9     0
         3     6
         2     0
         4     6
         0     6
         3     0
         6     6

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 5: (2, 1) -&gt; (2, 7)
     -  segment 14: (2, 1) -&gt; (2, 7)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 30: (3, 9) -&gt; (8, 9)
     -  reference segment 24: (1, 9) -&gt; (3, 9) -&gt; (4, 9) -&gt; (5, 9) -&gt; (6, 9) -&gt; (8, 9)

     -  student   solution has 80 non-null entries
     -  reference solution has 50 non-null entries
     -  30 extra entries in student solution, including: (3, 9) -&gt; (8, 9)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (5, 1) -&gt; (1, 9)
     -  segment 7: (5, 1) -&gt; (1, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 33: (8, 4) -&gt; (3, 9)
     -  reference segment 31: (9, 3) -&gt; (8, 4) -&gt; (7, 5) -&gt; (6, 6) -&gt; (5, 7) -&gt; (4, 8) -&gt; (3, 9)

     -  student   solution has 311 non-null entries
     -  reference solution has 128 non-null entries
     -  183 extra entries in student solution, including: (1, 9) -&gt; (9, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 15: (21, 0) -&gt; (38, 0)
     -  segment 33: (21, 0) -&gt; (38, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 76: (24, 3) -&gt; (24, 29)
     -  reference segment 227: (24, 0) -&gt; (24, 3) -&gt; (24, 6) -&gt; (24, 17) -&gt; (24, 19) -&gt; (24, 20) -&gt; (24, 22) -&gt; (24, 23) -&gt; (24, 25) -&gt; (24, 29)

     -  student   solution has 399 non-null entries
     -  reference solution has 242 non-null entries
     -  157 extra entries in student solution, including: (11, 46) -&gt; (45, 46)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 2: (1, 0) -&gt; (1, 4)
     -  segment 6: (1, 0) -&gt; (1, 4)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 13: (0, 0) -&gt; (3, 0)
     -  reference segment 3: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (3, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 4: (1, 0) -&gt; (1, 9)
     -  segment 11: (1, 0) -&gt; (1, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 13: (9, 1) -&gt; (2, 8)
     -  reference segment 34: (9, 1) -&gt; (8, 2) -&gt; (7, 3) -&gt; (6, 4) -&gt; (5, 5) -&gt; (4, 6) -&gt; (3, 7) -&gt; (2, 8) -&gt; (1, 9)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (2, 9) -&gt; (9, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 19: (0, 4) -&gt; (19, 4)
     -  segment 114: (0, 4) -&gt; (19, 4)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 130: (5, 2) -&gt; (13, 18)
     -  reference segment 2084: (4, 0) -&gt; (5, 2) -&gt; (6, 4) -&gt; (7, 6) -&gt; (8, 8) -&gt; (9, 10) -&gt; (10, 12) -&gt; (11, 14) -&gt; (12, 16) -&gt; (13, 18)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (1, 19) -&gt; (18, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 1) -&gt; (4, 1)
     -  segment 3: (0, 1) -&gt; (4, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 9: (0, 3) -&gt; (3, 3)
     -  reference segment 5: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (3, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 0) -&gt; (5, 0)
     -  segment 6: (0, 0) -&gt; (5, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 17: (0, 2) -&gt; (4, 2)
     -  reference segment 5: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 5: (0, 2) -&gt; (9, 2)
     -  segment 11: (0, 2) -&gt; (9, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (0, 1) -&gt; (8, 1)
     -  reference segment 13: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (1, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (14, 0)
     -  segment 6: (0, 0) -&gt; (14, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 63: (0, 2) -&gt; (13, 2)
     -  reference segment 32: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (2, 3) -&gt; (14, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 18: (0, 1) -&gt; (24, 1)
     -  segment 38: (0, 1) -&gt; (24, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 157: (1, 1) -&gt; (24, 1)
     -  reference segment 93: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1) -&gt; (10, 1) -&gt; (11, 1) -&gt; (12, 1) -&gt; (13, 1) -&gt; (14, 1) -&gt; (15, 1) -&gt; (16, 1) -&gt; (17, 1) -&gt; (18, 1) -&gt; (19, 1) -&gt; (20, 1) -&gt; (21, 1) -&gt; (22, 1) -&gt; (23, 1) -&gt; (24, 1)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (2, 3) -&gt; (17, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 10 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          collinear.numberOfSegments() -&gt; 2
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate points[] array that was passed to constructor
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 6 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -&gt; 0
          collinear.numberOfSegments() -&gt; 0
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 6
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
      5147  9120
     15184 17758
     18802 17374
     15184 17758
     26614 19951

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
      2591 31325
      2591 31325
      5461  7711
     14477 23470

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     11594  6006
      4550 24126
     11594  6006

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
     16809 31942
     16809 31942

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/21 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02        8448           0           8448                  376         
=&gt; passed    32   0.01       66560           0          66560                 1520         
=&gt; passed    64   0.01      528384           0         528384                 6112         
=&gt; passed   128   0.07     4210688           0        4210688                24512         
=&gt; passed   256   0.52    33619968           0       33619968                98176         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        9984           0           9984                 1000         
=&gt; passed    32   0.00       72704           0          72704                 2768         
=&gt; passed    64   0.01      552960           0         552960                 8608         
=&gt; passed   128   0.06     4308992           0        4308992                29504         
=&gt; passed   256   0.49    34013184           0       34013184               108160         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.02           0       12164          24328                    0         
=&gt; passed   128   0.01           0       57125         114250                    0         
=&gt; passed   256   0.03           0      261779         523558                    0         
=&gt; passed   512   0.12           0     1180126        2360252                    0         
=&gt; passed  1024   0.46           0     5247256       10494512                    0         
=&gt; passed  2048   1.03           0    23091617       46183234                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46183234 / 10494512) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8464         
=&gt; passed   128   0.01           0       16128          32256                41861         
=&gt; passed   256   0.02           0       65024         130048               197739         
=&gt; passed   512   0.10           0      261120         522240               921394         
=&gt; passed  1024   0.34           0     1046528        2093056              4210837         
=&gt; passed  2048   0.67           0     4190208        8380416             18897074         
=&gt; passed  4096   2.21           0    16769024       33538048             84044608         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11415          22830                 1722         
=&gt; passed   128   0.00           0       53738         107476                 8478         
=&gt; passed   256   0.01           0      244720         489440                41086         
=&gt; passed   512   0.05           0     1090750        2181500               195360         
=&gt; passed  1024   0.21           0     4794589        9589178               909394         
=&gt; passed  2048   0.94           0    20852172       41704344              4154981         
=&gt; passed  4096   4.03           0    90008838      180017676             18678417         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180017676 / 41704344) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11450          22900                 1446         
=&gt; passed   128   0.00           0       54236         108472                 6645         
=&gt; passed   256   0.01           0      249796         499592                29806         
=&gt; passed   512   0.05           0     1123046        2246092               133405         
=&gt; passed  1024   0.22           0     4978804        9957608               596340         
=&gt; passed  2048   0.98           0    21817027       43634054              2638513         
=&gt; passed  4096   4.18           0    94808932      189617864             11584722         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189617864 / 43634054) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-03-Oct 02:37:27</td></tr>
        <tr><td>Raw Score</td><td>69.88 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#849900">22/41 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#419900">69.88%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.3K Oct  3 09:37 BruteCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  3 09:37 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Oct  3 09:37 Point.java
-rw-r--r-- 1 2.9K Oct  3 09:37 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
BruteCollinearPoints.java:7:8: Unused import statement for 'java.util.Arrays'.
FastCollinearPoints.java:7:1: Do not import 'javax.sound.sampled.Line' on COS 226 programming assignments.
FastCollinearPoints.java:7:8: Unused import statement for 'javax.sound.sampled.Line'.
Checkstyle ends with 3 errors.
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
     -  segments() contains the same segment more than once
     -  segment 2: (7000, 3000) -&gt; (3000, 7000)
     -  segment 3: (7000, 3000) -&gt; (3000, 7000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (10000, 0) -&gt; (7000, 3000)
     -  reference segment 0: (10000, 0) -&gt; (7000, 3000) -&gt; (3000, 7000) -&gt; (0, 10000)

     -  student   solution has 8 non-null entries
     -  reference solution has 2 non-null entries
     -  8 extra entries in student solution, including: (20000, 21000) -&gt; (6000, 7000)
     -  2 missing entries in student solution, including: (3000, 4000) -&gt; (6000, 7000) -&gt; (14000, 15000) -&gt; (20000, 21000)

  *  filename = equidistant.txt
     -  segments() contains the same segment more than once
     -  segment 3: (0, 10000) -&gt; (2000, 8000)
     -  segment 4: (0, 10000) -&gt; (2000, 8000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (10000, 0) -&gt; (13000, 0)
     -  reference segment 3: (10000, 0) -&gt; (13000, 0) -&gt; (20000, 0) -&gt; (30000, 0)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  15 extra entries in student solution, including: (20000, 10000) -&gt; (0, 30000)
     -  3 missing entries in student solution, including: (30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)

  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 6: (1000, 28000) -&gt; (1000, 31000)
     -  segment 9: (1000, 28000) -&gt; (1000, 31000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (1000, 17000) -&gt; (1000, 28000)
     -  reference segment 3: (1000, 17000) -&gt; (1000, 27000) -&gt; (1000, 28000) -&gt; (1000, 31000)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  16 extra entries in student solution, including: (28000, 29000) -&gt; (4000, 29000)
     -  4 missing entries in student solution, including: (2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 11: (1000, 26000) -&gt; (18000, 26000)
     -  segment 17: (1000, 26000) -&gt; (18000, 26000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (24000, 23000) -&gt; (3000, 23000)
     -  reference segment 0: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

     -  student   solution has 24 non-null entries
     -  reference solution has 6 non-null entries
     -  21 extra entries in student solution, including: (1000, 26000) -&gt; (18000, 26000)
     -  3 missing entries in student solution, including: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
     -  segments() contains the same segment more than once
     -  segment 2: (5067, 14118) -&gt; (7821, 14118)
     -  segment 3: (5067, 14118) -&gt; (7821, 14118)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (7453, 14118) -&gt; (5067, 14118)
     -  reference segment 4: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  17 extra entries in student solution, including: (5067, 14118) -&gt; (7821, 14118)
     -  2 missing entries in student solution, including: (2682, 14118) -&gt; (5067, 14118) -&gt; (7453, 14118) -&gt; (7821, 14118)

  *  filename = horizontal25.txt
     -  segments() contains the same segment more than once
     -  segment 2: (18005, 13870) -&gt; (10653, 13870)
     -  segment 3: (18005, 13870) -&gt; (10653, 13870)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (19459, 13870) -&gt; (18005, 13870)
     -  reference segment 13: (2566, 13870) -&gt; (10653, 13870) -&gt; (18005, 13870) -&gt; (19459, 13870)

     -  student   solution has 100 non-null entries
     -  reference solution has 25 non-null entries
     -  87 extra entries in student solution, including: (8784, 20913) -&gt; (19666, 20913)
     -  12 missing entries in student solution, including: (7300, 17394) -&gt; (9322, 17394) -&gt; (10334, 17394) -&gt; (16910, 17394)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
     -  segments() contains the same segment more than once
     -  segment 2: (13040, 4793) -&gt; (19905, 4793)
     -  segment 3: (13040, 4793) -&gt; (19905, 4793)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (5459, 4793) -&gt; (13040, 4793)
     -  reference segment 0: (5459, 4793) -&gt; (13040, 4793) -&gt; (19905, 4793) -&gt; (20948, 4793)

     -  student   solution has 4 non-null entries
     -  reference solution has 1 non-null entries
     -  4 extra entries in student solution, including: (20948, 4793) -&gt; (13040, 4793)
     -  1 missing entry in student solution: (5459, 4793) -&gt; (13040, 4793) -&gt; (19905, 4793) -&gt; (20948, 4793)

     -  failed on trial 1 of 500
     4
      5459  4793
     20948  4793
     19905  4793
     13040  4793

  *   5 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 9: (8175, 16208) -&gt; (14452, 16208)
     -  segment 14: (8175, 16208) -&gt; (14452, 16208)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (17109, 16072) -&gt; (19416, 16072)
     -  reference segment 3: (3464, 16072) -&gt; (6225, 16072) -&gt; (17109, 16072) -&gt; (19416, 16072)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  18 extra entries in student solution, including: (8175, 16208) -&gt; (14452, 16208)
     -  3 missing entries in student solution, including: (1190, 16208) -&gt; (8175, 16208) -&gt; (11480, 16208) -&gt; (14452, 16208)

     -  failed on trial 1 of 250
     20
     17109 16072
     19246 10335
     17761 10335
      1190 16208
      3464 16072
     10118 12837
      3878 12837
     11480 16208
     10335  5318
     14452 16208
      6225 16072
     19438  5318
     13793  5318
     13316 12837
      8175 16208
     19416 16072
     10067  5318
      4133 12837
      5921 10335
     16005 10335

  *  10 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 20: (18466, 11593) -&gt; (2600, 11593)
     -  segment 23: (18466, 11593) -&gt; (2600, 11593)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (6009, 17824) -&gt; (4223, 17824)
     -  reference segment 6: (2788, 17824) -&gt; (4223, 17824) -&gt; (6009, 17824) -&gt; (19798, 17824)

     -  student   solution has 40 non-null entries
     -  reference solution has 10 non-null entries
     -  38 extra entries in student solution, including: (4715, 20251) -&gt; (18024, 20251)
     -  8 missing entries in student solution, including: (5736, 20012) -&gt; (10768, 20012) -&gt; (11965, 20012) -&gt; (18464, 20012)

     -  failed on trial 1 of 50

  *  15 random horizontal line segments
     -  segments() contains the same segment more than once
     -  segment 11: (18905, 12089) -&gt; (12828, 12089)
     -  segment 23: (18905, 12089) -&gt; (12828, 12089)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (16545, 15821) -&gt; (1360, 15821)
     -  reference segment 12: (1360, 15821) -&gt; (4143, 15821) -&gt; (16545, 15821) -&gt; (18076, 15821)

     -  student   solution has 60 non-null entries
     -  reference solution has 15 non-null entries
     -  51 extra entries in student solution, including: (18170, 19885) -&gt; (14513, 19885)
     -  6 missing entries in student solution, including: (1210, 18820) -&gt; (16097, 18820) -&gt; (20054, 18820) -&gt; (20257, 18820)

     -  failed on trial 1 of 5

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
     -  segments() contains the same segment more than once
     -  segment 2: (14407, 17188) -&gt; (14407, 10367)
     -  segment 3: (14407, 17188) -&gt; (14407, 10367)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (14407, 19953) -&gt; (14407, 17188)
     -  reference segment 3: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  19 extra entries in student solution, including: (14407, 19953) -&gt; (14407, 17188)
     -  4 missing entries in student solution, including: (14407, 10367) -&gt; (14407, 17188) -&gt; (14407, 17831) -&gt; (14407, 19953)

  *  filename = vertical25.txt
     -  segments() contains the same segment more than once
     -  segment 2: (11585, 4132) -&gt; (11585, 12912)
     -  segment 3: (11585, 4132) -&gt; (11585, 12912)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (11585, 5103) -&gt; (11585, 4132)
     -  reference segment 12: (11585, 4132) -&gt; (11585, 5103) -&gt; (11585, 11220) -&gt; (11585, 12912)

     -  student   solution has 100 non-null entries
     -  reference solution has 25 non-null entries
     -  82 extra entries in student solution, including: (1825, 19680) -&gt; (1825, 19478)
     -  7 missing entries in student solution, including: (19953, 10489) -&gt; (19953, 10688) -&gt; (19953, 19299) -&gt; (19953, 20439)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 3b: Random vertical line segments
  *   1 random vertical line segment
     -  segments() contains the same segment more than once
     -  segment 2: (13151, 6442) -&gt; (13151, 4104)
     -  segment 3: (13151, 6442) -&gt; (13151, 4104)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (13151, 18442) -&gt; (13151, 6442)
     -  reference segment 0: (13151, 4104) -&gt; (13151, 4499) -&gt; (13151, 6442) -&gt; (13151, 18442)

     -  student   solution has 4 non-null entries
     -  reference solution has 1 non-null entries
     -  4 extra entries in student solution, including: (13151, 18442) -&gt; (13151, 6442)
     -  1 missing entry in student solution: (13151, 4104) -&gt; (13151, 4499) -&gt; (13151, 6442) -&gt; (13151, 18442)

     -  failed on trial 1 of 500
     4
     13151 18442
     13151  4499
     13151  4104
     13151  6442

  *   5 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 3: (1859, 18794) -&gt; (1859, 5221)
     -  segment 6: (1859, 18794) -&gt; (1859, 5221)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (19581, 11394) -&gt; (19581, 8049)
     -  reference segment 3: (19581, 8049) -&gt; (19581, 11239) -&gt; (19581, 11394) -&gt; (19581, 20980)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  17 extra entries in student solution, including: (1859, 18110) -&gt; (1859, 18794)
     -  2 missing entries in student solution, including: (4471, 6132) -&gt; (4471, 6607) -&gt; (4471, 10062) -&gt; (4471, 14895)

     -  failed on trial 1 of 250
     20
     19581 11394
      1859 18110
      1859 12244
      1859  5221
      4471  6132
      5857  2258
      1859 18794
      4471 14895
      5857 11718
     20186 14572
     20186  4330
     20186 19559
      5857 20048
      5857  3774
     19581 20980
     19581 11239
      4471 10062
      4471  6607
     20186  3520
     19581  8049

  *  10 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 20: (8372, 16474) -&gt; (8372, 4075)
     -  segment 24: (8372, 16474) -&gt; (8372, 4075)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (12522, 7203) -&gt; (12522, 18457)
     -  reference segment 7: (12522, 2445) -&gt; (12522, 7203) -&gt; (12522, 14142) -&gt; (12522, 18457)

     -  student   solution has 40 non-null entries
     -  reference solution has 10 non-null entries
     -  35 extra entries in student solution, including: (3082, 18808) -&gt; (3082, 16178)
     -  5 missing entries in student solution, including: (8857, 5210) -&gt; (8857, 6730) -&gt; (8857, 14351) -&gt; (8857, 18156)

     -  failed on trial 1 of 50

  *  15 random vertical line segments
     -  segments() contains the same segment more than once
     -  segment 16: (9962, 2334) -&gt; (9962, 7931)
     -  segment 23: (9962, 2334) -&gt; (9962, 7931)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (9630, 19472) -&gt; (9630, 17493)
     -  reference segment 9: (9630, 6451) -&gt; (9630, 9565) -&gt; (9630, 17493) -&gt; (9630, 19472)

     -  student   solution has 60 non-null entries
     -  reference solution has 15 non-null entries
     -  52 extra entries in student solution, including: (9069, 18853) -&gt; (9069, 18127)
     -  7 missing entries in student solution, including: (11331, 12482) -&gt; (11331, 13147) -&gt; (11331, 14531) -&gt; (11331, 17732)

     -  failed on trial 1 of 5

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
     -  segments() contains the same segment more than once
     -  segment 3: (0, 10000) -&gt; (2000, 8000)
     -  segment 4: (0, 10000) -&gt; (2000, 8000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (10000, 0) -&gt; (13000, 0)
     -  reference segment 3: (10000, 0) -&gt; (13000, 0) -&gt; (20000, 0) -&gt; (30000, 0)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  15 extra entries in student solution, including: (20000, 10000) -&gt; (0, 30000)
     -  3 missing entries in student solution, including: (30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)

  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 6: (1000, 28000) -&gt; (1000, 31000)
     -  segment 9: (1000, 28000) -&gt; (1000, 31000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (1000, 17000) -&gt; (1000, 28000)
     -  reference segment 3: (1000, 17000) -&gt; (1000, 27000) -&gt; (1000, 28000) -&gt; (1000, 31000)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  16 extra entries in student solution, including: (28000, 29000) -&gt; (4000, 29000)
     -  4 missing entries in student solution, including: (2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 11: (1000, 26000) -&gt; (18000, 26000)
     -  segment 17: (1000, 26000) -&gt; (18000, 26000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (24000, 23000) -&gt; (3000, 23000)
     -  reference segment 0: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

     -  student   solution has 24 non-null entries
     -  reference solution has 6 non-null entries
     -  21 extra entries in student solution, including: (1000, 26000) -&gt; (18000, 26000)
     -  3 missing entries in student solution, including: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 7: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
     -  segments() contains the same segment more than once
     -  segment 3: (0, 10000) -&gt; (2000, 8000)
     -  segment 4: (0, 10000) -&gt; (2000, 8000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (10000, 0) -&gt; (13000, 0)
     -  reference segment 3: (10000, 0) -&gt; (13000, 0) -&gt; (20000, 0) -&gt; (30000, 0)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  15 extra entries in student solution, including: (20000, 10000) -&gt; (0, 30000)
     -  3 missing entries in student solution, including: (30000, 0) -&gt; (20000, 10000) -&gt; (10000, 20000) -&gt; (0, 30000)

  *  filename = input40.txt
     -  segments() contains the same segment more than once
     -  segment 6: (1000, 28000) -&gt; (1000, 31000)
     -  segment 9: (1000, 28000) -&gt; (1000, 31000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (1000, 17000) -&gt; (1000, 28000)
     -  reference segment 3: (1000, 17000) -&gt; (1000, 27000) -&gt; (1000, 28000) -&gt; (1000, 31000)

     -  student   solution has 16 non-null entries
     -  reference solution has 4 non-null entries
     -  16 extra entries in student solution, including: (28000, 29000) -&gt; (4000, 29000)
     -  4 missing entries in student solution, including: (2000, 29000) -&gt; (4000, 29000) -&gt; (22000, 29000) -&gt; (28000, 29000)

  *  filename = input48.txt
     -  segments() contains the same segment more than once
     -  segment 11: (1000, 26000) -&gt; (18000, 26000)
     -  segment 17: (1000, 26000) -&gt; (18000, 26000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (24000, 23000) -&gt; (3000, 23000)
     -  reference segment 0: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

     -  student   solution has 24 non-null entries
     -  reference solution has 6 non-null entries
     -  21 extra entries in student solution, including: (1000, 26000) -&gt; (18000, 26000)
     -  3 missing entries in student solution, including: (1000, 23000) -&gt; (3000, 23000) -&gt; (18000, 23000) -&gt; (24000, 23000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
     -  segments() contains the same segment more than once
     -  segment 2: (10781, 14863) -&gt; (9782, 6601)
     -  segment 3: (10781, 14863) -&gt; (9782, 6601)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (10004, 8437) -&gt; (10781, 14863)
     -  reference segment 0: (9116, 1093) -&gt; (9782, 6601) -&gt; (10004, 8437) -&gt; (10781, 14863)

     -  student   solution has 4 non-null entries
     -  reference solution has 1 non-null entries
     -  3 extra entries in student solution, including: (10004, 8437) -&gt; (10781, 14863)

     -  failed on trial 1 of 500
     4
     10004  8437
      9116  1093
      9782  6601
     10781 14863

  *   5 random line segments
     -  segments() contains the same segment more than once
     -  segment 6: (12582, 9670) -&gt; (11070, 4644)
     -  segment 8: (12582, 9670) -&gt; (11070, 4644)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (6207, 12131) -&gt; (12976, 14105)
     -  reference segment 1: (6207, 12131) -&gt; (12976, 14105) -&gt; (14910, 14669) -&gt; (18778, 15797)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  18 extra entries in student solution, including: (12976, 14105) -&gt; (18778, 15797)
     -  3 missing entries in student solution, including: (6207, 12131) -&gt; (12976, 14105) -&gt; (14910, 14669) -&gt; (18778, 15797)

     -  failed on trial 1 of 250
     20
      6207 12131
     13878 13978
      6586  5524
      8930  3441
     10612 10895
     11502  6080
     11070  4644
     14910 14669
     12582  9670
      9796 10311
     11314  5890
      1858  5158
      9738  5768
      5308  7099
     18778 15797
      8046  1489
      8709  2953
     12976 14105
     15781 18569
       412  3595

  *  10 random line segments
     -  segments() contains the same segment more than once
     -  segment 15: (19787, 17555) -&gt; (12155, 10723)
     -  segment 22: (19787, 17555) -&gt; (12155, 10723)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (6177, 12041) -&gt; (2145, 3571)
     -  reference segment 9: (2145, 3571) -&gt; (3873, 7201) -&gt; (6177, 12041) -&gt; (7617, 15066)

     -  student   solution has 40 non-null entries
     -  reference solution has 10 non-null entries
     -  35 extra entries in student solution, including: (14850, 21825) -&gt; (4398, 13437)
     -  5 missing entries in student solution, including: (1785, 11340) -&gt; (4398, 13437) -&gt; (6140, 14835) -&gt; (14850, 21825)

     -  failed on trial 1 of 100

  *  15 random line segments
     -  segments() contains the same segment more than once
     -  segment 34: (4455, 2603) -&gt; (10313, 7649)
     -  segment 35: (4455, 2603) -&gt; (10313, 7649)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (10409, 2147) -&gt; (11657, 5399)
     -  reference segment 13: (10201, 1605) -&gt; (10409, 2147) -&gt; (11657, 5399) -&gt; (14361, 12445)

     -  student   solution has 60 non-null entries
     -  reference solution has 15 non-null entries
     -  52 extra entries in student solution, including: (15112, 14792) -&gt; (19261, 15305)
     -  7 missing entries in student solution, including: (5892, 13652) -&gt; (6814, 13766) -&gt; (15112, 14792) -&gt; (19261, 15305)

     -  failed on trial 1 of 50

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 9: Random line segments
  *   1 random line segment
     -  segments() contains the same segment more than once
     -  segment 2: (4200, 5101) -&gt; (5076, 6037)
     -  segment 3: (4200, 5101) -&gt; (5076, 6037)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (3689, 4555) -&gt; (4200, 5101)
     -  reference segment 0: (3689, 4555) -&gt; (4200, 5101) -&gt; (5076, 6037) -&gt; (5295, 6271)

     -  student   solution has 4 non-null entries
     -  reference solution has 1 non-null entries
     -  4 extra entries in student solution, including: (5295, 6271) -&gt; (4200, 5101)
     -  1 missing entry in student solution: (3689, 4555) -&gt; (4200, 5101) -&gt; (5076, 6037) -&gt; (5295, 6271)

     -  failed on trial 1 of 500
     4
      3689  4555
      5295  6271
      5076  6037
      4200  5101

  *   5 random line segments
     -  segments() contains the same segment more than once
     -  segment 8: (12594, 7088) -&gt; (10384, 5354)
     -  segment 11: (12594, 7088) -&gt; (10384, 5354)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (7902, 3394) -&gt; (7987, 3447)
     -  reference segment 1: (7902, 3394) -&gt; (7987, 3447) -&gt; (10962, 5302) -&gt; (13682, 6998)

     -  student   solution has 20 non-null entries
     -  reference solution has 5 non-null entries
     -  19 extra entries in student solution, including: (8444, 11144) -&gt; (7741, 11144)
     -  4 missing entries in student solution, including: (5706, 11144) -&gt; (7519, 11144) -&gt; (7741, 11144) -&gt; (8444, 11144)

     -  failed on trial 1 of 250
     20
      7902  3394
      6685  5947
     12529  7037
      5366  8682
      5366  5427
      7069  2753
      6503  5765
      4956  4218
     10384  5354
      7519 11144
     13682  6998
     12594  7088
      8444 11144
      5706 11144
     10962  5302
      7987  3447
      5411  4673
      5366  5241
      7741 11144
      5366  5520

  *  10 random line segments
     -  segments() contains the same segment more than once
     -  segment 12: (6337, 11361) -&gt; (6332, 11316)
     -  segment 21: (6337, 11361) -&gt; (6332, 11316)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 0: (3539, 12497) -&gt; (4705, 13399)
     -  reference segment 5: (3539, 12497) -&gt; (4228, 13030) -&gt; (4705, 13399) -&gt; (5818, 14260)

     -  student   solution has 40 non-null entries
     -  reference solution has 10 non-null entries
     -  38 extra entries in student solution, including: (4705, 13399) -&gt; (5818, 14260)
     -  8 missing entries in student solution, including: (3539, 12497) -&gt; (4228, 13030) -&gt; (4705, 13399) -&gt; (5818, 14260)

     -  failed on trial 1 of 100

  *  15 random line segments
     -  segments() contains the same segment more than once
     -  segment 9: (9155, 2882) -&gt; (9935, 9187)
     -  segment 17: (9155, 2882) -&gt; (9935, 9187)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (3712, 8851) -&gt; (6820, 10923)
     -  reference segment 7: (3208, 8515) -&gt; (3712, 8851) -&gt; (5056, 9747) -&gt; (6820, 10923)

     -  student   solution has 60 non-null entries
     -  reference solution has 15 non-null entries
     -  53 extra entries in student solution, including: (6095, 14582) -&gt; (4445, 13922)
     -  8 missing entries in student solution, including: (9725, 12737) -&gt; (11001, 13404) -&gt; (11309, 13565) -&gt; (12717, 14301)

     -  failed on trial 1 of 50

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 8 operations involving BruteCollinearPoints
     -  first call to student numberOfSegments() = 8
     -  last  call to student numberOfSegments() = 0
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 8
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.numberOfSegments() -&gt; 0
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 6 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 12: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 8
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 16
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 16
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 24
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 20
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 20
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 14: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
      4645 27758
      8352 19260
      8352 19260
     23984 31846
     27511 32686

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
     13796 12792
     32148 19289
     10378 20114
     10378 20114

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     18148 11728
     28191 21783
     18148 11728

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
      6191 18611
      6191 18611

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 5/17 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Check for fragile dependence on return value of toString()
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 9: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 11: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (1, 4) -&gt; (6, 9)
     -  segment 1: (1, 4) -&gt; (6, 9)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (1, 4) -&gt; (6, 9)

     -  failed on trial 118 of 500
     10
         2     5
         5     7
         5     8
         9     4
         0     7
         3     6
         5     4
         1     4
         0     2
         6     9

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 2: (1, 5) -&gt; (9, 9)
     -  segment 5: (1, 5) -&gt; (9, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 29: (2, 5) -&gt; (9, 5)
     -  reference segment 19: (1, 5) -&gt; (2, 5) -&gt; (4, 5) -&gt; (8, 5) -&gt; (9, 5)

     -  student   solution has 77 non-null entries
     -  reference solution has 42 non-null entries
     -  35 extra entries in student solution, including: (0, 9) -&gt; (6, 9)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 2: (0, 5) -&gt; (9, 5)
     -  segment 16: (0, 5) -&gt; (9, 5)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 36: (2, 2) -&gt; (9, 2)
     -  reference segment 54: (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2)

     -  student   solution has 317 non-null entries
     -  reference solution has 125 non-null entries
     -  192 extra entries in student solution, including: (4, 9) -&gt; (9, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 9: (42, 4) -&gt; (42, 39)
     -  segment 23: (42, 4) -&gt; (42, 39)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 67: (35, 10) -&gt; (1, 44)
     -  reference segment 35: (35, 10) -&gt; (32, 13) -&gt; (29, 16) -&gt; (26, 19) -&gt; (16, 29) -&gt; (4, 41) -&gt; (1, 44) -&gt; (0, 45)

     -  student   solution has 341 non-null entries
     -  reference solution has 205 non-null entries
     -  136 extra entries in student solution, including: (25, 49) -&gt; (44, 49)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 4) -&gt; (4, 4)
     -  segment 6: (0, 4) -&gt; (4, 4)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 12: (4, 0) -&gt; (1, 3)
     -  reference segment 1: (4, 0) -&gt; (3, 1) -&gt; (2, 2) -&gt; (1, 3) -&gt; (0, 4)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 8) -&gt; (9, 8)
     -  segment 36: (0, 8) -&gt; (9, 8)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 22: (5, 0) -&gt; (2, 6)
     -  reference segment 11: (5, 0) -&gt; (4, 2) -&gt; (3, 4) -&gt; (2, 6) -&gt; (1, 8)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (1, 9) -&gt; (8, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 36: (19, 6) -&gt; (3, 18)
     -  segment 102: (19, 6) -&gt; (3, 18)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 103: (18, 7) -&gt; (3, 17)
     -  reference segment 762: (18, 7) -&gt; (15, 9) -&gt; (12, 11) -&gt; (9, 13) -&gt; (6, 15) -&gt; (3, 17) -&gt; (0, 19)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (3, 19) -&gt; (16, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 12: (0, 3) -&gt; (4, 3)
     -  segment 15: (0, 3) -&gt; (4, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 5: (0, 0) -&gt; (3, 0)
     -  reference segment 2: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (4, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 1) -&gt; (5, 1)
     -  segment 5: (0, 1) -&gt; (5, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 21: (1, 0) -&gt; (5, 0)
     -  reference segment 3: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0) -&gt; (5, 0)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 3) -&gt; (9, 3)
     -  segment 4: (0, 3) -&gt; (9, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 18: (1, 1) -&gt; (9, 1)
     -  reference segment 13: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (7, 1) -&gt; (8, 1) -&gt; (9, 1)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (0, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 12: (0, 0) -&gt; (14, 0)
     -  segment 21: (0, 0) -&gt; (14, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 17: (1, 2) -&gt; (14, 2)
     -  reference segment 32: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (4, 3) -&gt; (13, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 6: (0, 3) -&gt; (24, 3)
     -  segment 37: (0, 3) -&gt; (24, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 63: (1, 2) -&gt; (24, 2)
     -  reference segment 94: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2) -&gt; (5, 2) -&gt; (6, 2) -&gt; (7, 2) -&gt; (8, 2) -&gt; (9, 2) -&gt; (10, 2) -&gt; (11, 2) -&gt; (12, 2) -&gt; (13, 2) -&gt; (14, 2) -&gt; (15, 2) -&gt; (16, 2) -&gt; (17, 2) -&gt; (18, 2) -&gt; (19, 2) -&gt; (20, 2) -&gt; (21, 2) -&gt; (22, 2) -&gt; (23, 2) -&gt; (24, 2)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (4, 3) -&gt; (20, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 12 operations involving FastCollinearPoints
     -  first call to student numberOfSegments() = 2
     -  last  call to student numberOfSegments() = 0
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.numberOfSegments() -&gt; 2
          collinear.numberOfSegments() -&gt; 2
          collinear.numberOfSegments() -&gt; 2
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 0
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 5 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 15: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 2
  *  filename = equidistant.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input40.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 4
  *  filename = input48.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 6
  *  filename = horizontal5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = vertical5.txt
     -  segments() and numberOfSegments() are inconsistent
     -  numberOfSegments()                     = 0
     -  length of array returned by segments() = 5
  *  filename = random23.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 16: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 17: Check that the constructor throws an exception if duplicate points
  *  50 points
     -  failed on trial 1 of 5
     -  does not throw a java.lang.IllegalArgumentException

  *  25 points
     -  failed on trial 1 of 10
     -  does not throw a java.lang.IllegalArgumentException

  *  5 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     5
      8686 24501
      9430 16000
      9430 16000
     23229  9982
     27112  1488

  *  4 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     4
      3082 11448
      2353 14612
      2353 14612
      8340 10621

  *  3 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     3
     23945 31956
      3057 15377
     23945 31956

  *  2 points
     -  failed on trial 1 of 100
     -  does not throw a java.lang.IllegalArgumentException
     2
     18049  1527
     18049  1527

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/21 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02        2176           0           2176                    0         
=&gt; passed    32   0.00       16896           0          16896                    0         
=&gt; passed    64   0.01      133120           0         133120                    0         
=&gt; passed   128   0.02     1056768           0        1056768                    0         
=&gt; passed   256   0.13     8421376           0        8421376                    0         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00        2416           0           2416                    0         
=&gt; passed    32   0.00       17814           0          17814                    0         
=&gt; passed    64   0.01      137228           0         137228                    0         
=&gt; passed   128   0.02     1072522           0        1072522                    0         
=&gt; passed   256   0.12     8488057           0        8488057                    0         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.02           0       12109          24218                    0         
=&gt; passed   128   0.02           0       57205         114410                    0         
=&gt; passed   256   0.03           0      261823         523646                    0         
=&gt; passed   512   0.13           0     1180194        2360388                    0         
=&gt; passed  1024   0.47           0     5246844       10493688                    0         
=&gt; passed  2048   0.95           0    23092082       46184164                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46184164 / 10493688) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8493         
=&gt; passed   128   0.01           0       16128          32256                41487         
=&gt; passed   256   0.02           0       65024         130048               197720         
=&gt; passed   512   0.09           0      261120         522240               923072         
=&gt; passed  1024   0.40           0     1046528        2093056              4214047         
=&gt; passed  2048   0.60           0     4190208        8380416             18913468         
=&gt; passed  4096   2.24           0    16769024       33538048             83999300         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11354          22708                 1726         
=&gt; passed   128   0.00           0       53656         107312                 8420         
=&gt; passed   256   0.01           0      244492         488984                41213         
=&gt; passed   512   0.05           0     1089246        2178492               194947         
=&gt; passed  1024   0.21           0     4791876        9583752               907725         
=&gt; passed  2048   0.93           0    20844404       41688808              4148606         
=&gt; passed  4096   4.08           0    89991682      179983364             18681997         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (179983364 / 41688808) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11516          23032                 1463         
=&gt; passed   128   0.00           0       54162         108324                 6615         
=&gt; passed   256   0.01           0      249546         499092                29859         
=&gt; passed   512   0.05           0     1123369        2246738               134052         
=&gt; passed  1024   0.22           0     4978243        9956486               596426         
=&gt; passed  2048   0.96           0    21816811       43633622              2639800         
=&gt; passed  4096   4.25           0    94806772      189613544             11587093         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189613544 / 43633622) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-24-Sep 06:52:25</td></tr>
        <tr><td>Raw Score</td><td>85.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#2D9900">30/39 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#1B9900">85.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.2K Sep 24 13:52 BruteCollinearPoints.java
-rw-r--r-- 1 2.5K Sep 24 13:52 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Sep 24 13:52 Point.java
-rw-r--r-- 1 2.8K Sep 24 13:52 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP EI: BruteCollinearPoints.segments() may expose internal representation by returning ls  At BruteCollinearPoints.java:[line 41]
M V EI_EXPOSE_REP EI: FastCollinearPoints.segments() may expose internal representation by returning ls  At FastCollinearPoints.java:[line 54]
Warnings generated: 2
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 16 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Depends upon compareTo() or compare() returning { -1, +1, 0 }
        instead of { negative integer, positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 8: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 5 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 16 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments() -&gt; 4
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()
          collinear.segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 4
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 4
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Check that data type does not mutate the constructor argument
  *  input8.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
  *  equidistant.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 12: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 13: Constructor throws exception if duplicate points
  *  20 points
     -  failed on trial 11 of 10
  *  10 points
     -  failed on trial 101 of 100
  *  5 points
     -  failed on trial 101 of 100
  *  4 points
     -  failed on trial 101 of 100
  *  3 points
     -  failed on trial 101 of 100
  *  2 points
     -  failed on trial 101 of 100
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 13/16 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 20 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Depends upon compareTo() or compare() returning { -1, +1, 0 }
        instead of { negative integer, positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (2, 1) -&gt; (9, 1)
     -  segment 1: (2, 1) -&gt; (9, 1)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (2, 1) -&gt; (9, 1)

     -  failed on trial 136 of 500
     10
         8     1
         5     1
         2     8
         3     9
         1     7
         8     5
         7     4
         9     1
         3     1
         2     1

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 1: (1, 3) -&gt; (8, 3)
     -  segment 18: (1, 3) -&gt; (8, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (5, 4) -&gt; (0, 9)
     -  reference segment 8: (6, 3) -&gt; (5, 4) -&gt; (4, 5) -&gt; (3, 6) -&gt; (2, 7) -&gt; (1, 8) -&gt; (0, 9)

     -  student   solution has 75 non-null entries
     -  reference solution has 41 non-null entries
     -  34 extra entries in student solution, including: (1, 8) -&gt; (9, 8)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 3: (9, 1) -&gt; (1, 9)
     -  segment 21: (9, 1) -&gt; (1, 9)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 45: (0, 1) -&gt; (8, 1)
     -  reference segment 61: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1) -&gt; (6, 1) -&gt; (8, 1) -&gt; (9, 1)

     -  student   solution has 321 non-null entries
     -  reference solution has 134 non-null entries
     -  187 extra entries in student solution, including: (1, 9) -&gt; (9, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 13: (43, 6) -&gt; (23, 46)
     -  segment 54: (43, 6) -&gt; (23, 46)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 102: (42, 18) -&gt; (42, 41)
     -  reference segment 234: (42, 2) -&gt; (42, 18) -&gt; (42, 19) -&gt; (42, 31) -&gt; (42, 41)

     -  student   solution has 375 non-null entries
     -  reference solution has 239 non-null entries
     -  136 extra entries in student solution, including: (6, 46) -&gt; (48, 46)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 12: (2, 0) -&gt; (2, 4)
     -  segment 14: (2, 0) -&gt; (2, 4)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 9: (3, 0) -&gt; (3, 3)
     -  reference segment 14: (3, 0) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 10: (0, 6) -&gt; (9, 6)
     -  segment 21: (0, 6) -&gt; (9, 6)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 32: (0, 2) -&gt; (6, 5)
     -  reference segment 91: (0, 2) -&gt; (2, 3) -&gt; (4, 4) -&gt; (6, 5) -&gt; (8, 6)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (4, 9) -&gt; (8, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 38: (19, 1) -&gt; (1, 19)
     -  segment 118: (19, 1) -&gt; (1, 19)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 142: (14, 2) -&gt; (6, 18)
     -  reference segment 344: (15, 0) -&gt; (14, 2) -&gt; (13, 4) -&gt; (12, 6) -&gt; (11, 8) -&gt; (10, 10) -&gt; (9, 12) -&gt; (8, 14) -&gt; (7, 16) -&gt; (6, 18)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (2, 19) -&gt; (18, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 8: (0, 2) -&gt; (4, 2)
     -  segment 15: (0, 2) -&gt; (4, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (1, 1) -&gt; (4, 1)
     -  reference segment 3: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (3, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 3) -&gt; (5, 3)
     -  segment 3: (0, 3) -&gt; (5, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 21: (0, 1) -&gt; (3, 1)
     -  reference segment 4: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 14: (0, 2) -&gt; (9, 2)
     -  segment 18: (0, 2) -&gt; (9, 2)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 45: (0, 0) -&gt; (8, 0)
     -  reference segment 12: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0) -&gt; (5, 0) -&gt; (6, 0) -&gt; (7, 0) -&gt; (8, 0) -&gt; (9, 0)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (1, 3) -&gt; (9, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 7: (0, 1) -&gt; (14, 1)
     -  segment 12: (0, 1) -&gt; (14, 1)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 62: (0, 3) -&gt; (13, 3)
     -  reference segment 33: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (0, 3) -&gt; (14, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 13: (0, 3) -&gt; (24, 3)
     -  segment 28: (0, 3) -&gt; (24, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 173: (0, 3) -&gt; (22, 3)
     -  reference segment 95: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3) -&gt; (10, 3) -&gt; (11, 3) -&gt; (12, 3) -&gt; (13, 3) -&gt; (14, 3) -&gt; (15, 3) -&gt; (16, 3) -&gt; (17, 3) -&gt; (18, 3) -&gt; (19, 3) -&gt; (20, 3) -&gt; (21, 3) -&gt; (22, 3) -&gt; (23, 3) -&gt; (24, 3)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (0, 3) -&gt; (24, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 10 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          collinear.segments()
          collinear.numberOfSegments() -&gt; 2
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 5 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.numberOfSegments() -&gt; 4
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 14: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 15: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 16: Constructor throws exception if duplicate points
  *  20 points
     -  failed on trial 11 of 10
  *  10 points
     -  failed on trial 101 of 100
  *  5 points
     -  failed on trial 101 of 100
  *  4 points
     -  failed on trial 101 of 100
  *  3 points
     -  failed on trial 101 of 100
  *  2 points
     -  failed on trial 101 of 100
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/20 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02         680           0            680                   46         
=&gt; passed    32   0.00        5456           0           5456                  123         
=&gt; passed    64   0.00       43680           0          43680                  305         
=&gt; passed   128   0.01      349504           0         349504                  734         
=&gt; passed   256   0.08     2796160           0        2796160                 1719         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00         769           0            769                   46         
=&gt; passed    32   0.00        5825           0           5825                  124         
=&gt; passed    64   0.00       45442           0          45442                  310         
=&gt; passed   128   0.01      356148           0         356148                  744         
=&gt; passed   256   0.04     2823465           0        2823465                 1728         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.02           0       12157          24314                    0         
=&gt; passed   128   0.01           0       57135         114270                    0         
=&gt; passed   256   0.03           0      261887         523774                    0         
=&gt; passed   512   0.09           0     1179990        2359980                    0         
=&gt; passed  1024   0.43           0     5247055       10494110                    0         
=&gt; passed  2048   0.97           0    23093117       46186234                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46186234 / 10494110) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8448         
=&gt; passed   128   0.01           0       16128          32256                41536         
=&gt; passed   256   0.02           0       65024         130048               197801         
=&gt; passed   512   0.11           0      261120         522240               922901         
=&gt; passed  1024   0.37           0     1046528        2093056              4205192         
=&gt; passed  2048   0.59           0     4190208        8380416             18916242         
=&gt; passed  4096   2.22           0    16769024       33538048             84006521         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11411          22822                 1638         
=&gt; passed   128   0.00           0       53702         107404                 8487         
=&gt; passed   256   0.01           0      244740         489480                41110         
=&gt; passed   512   0.05           0     1090744        2181488               196029         
=&gt; passed  1024   0.21           0     4790832        9581664               908733         
=&gt; passed  2048   0.92           0    20842795       41685590              4155211         
=&gt; passed  4096   4.02           0    90002358      180004716             18684756         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180004716 / 41685590) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11501          23002                 1513         
=&gt; passed   128   0.00           0       54175         108350                 6625         
=&gt; passed   256   0.01           0      249247         498494                29723         
=&gt; passed   512   0.05           0     1123550        2247100               133512         
=&gt; passed  1024   0.22           0     4979033        9958066               596560         
=&gt; passed  2048   0.98           0    21820006       43640012              2640843         
=&gt; passed  4096   4.16           0    94818721      189637442             11587640         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189637442 / 43640012) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-24-Sep 06:51:06</td></tr>
        <tr><td>Raw Score</td><td>85.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-009/wiki/view?page=Assessments">Assessment Guide</a> for information on how to interpret this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#2D9900">30/39 tests passed</font>
Memory:       <font color="#009900">1/1 tests passed</font>
Timing:       <font color="#009900">41/41 tests passed</font>

Aggregate score: <font color="#1B9900">85.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 2.2K Sep 24 13:51 BruteCollinearPoints.java
-rw-r--r-- 1 2.5K Sep 24 13:51 FastCollinearPoints.java
-rw-r--r-- 1 2.6K Sep 24 13:51 Point.java
-rw-r--r-- 1 2.8K Sep 24 13:51 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Point.java
*-----------------------------------------------------------

================================================================

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

================================================================

% javac FastCollinearPoints.java
*-----------------------------------------------------------

================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP EI: BruteCollinearPoints.segments() may expose internal representation by returning ls  At BruteCollinearPoints.java:[line 41]
M V EI_EXPOSE_REP EI: FastCollinearPoints.segments() may expose internal representation by returning ls  At FastCollinearPoints.java:[line 54]
Warnings generated: 2
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  *  positive infinite slope, where p and q have coordinates in [0, 500)
  *  positive infinite slope, where p and q have coordinates in [0, 32768)
  *  negative infinite slope, where p and q have coordinates in [0, 500)
  *  negative infinite slope, where p and q have coordinates in [0, 32768)
  *  positive zero     slope, where p and q have coordinates in [0, 500)
  *  positive zero     slope, where p and q have coordinates in [0, 32768)
  *  symmetric  for random points p and q with coordinates in [0, 500)
  *  symmetric  for random points p and q with coordinates in [0, 32768)
  *  transitive for random points p, q, and r with coordinates in [0, 500)
  *  transitive for random points p, q, and r with coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 500)
  *  slopeTo(), where p and q have coordinates in [0, 32768)
  *  slopeTo(), where p and q have coordinates in [0, 10)
  *  throw a java.lang.NullPointerException if argument is null
==&gt; passed

Test 2: p.compareTo(q)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p and q have coordinates in [0, 500)
  *  antisymmetric, where p and q have coordinates in [0, 32768)
  *  transitive, where p, q, and r have coordinates in [0, 500)
  *  transitive, where p, q, and r have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 500)
  *  sign of compareTo(), where p and q have coordinates in [0, 32768)
  *  sign of compareTo(), where p and q have coordinates in [0, 10)
  *  throw java.lang.NullPointerException exception if argument is null
==&gt; passed

Test 3: p.slopeOrder().compare(q, r)
  *  reflexive, where p and q have coordinates in [0, 500)
  *  reflexive, where p and q have coordinates in [0, 32768)
  *  antisymmetric, where p, q, and r have coordinates in [0, 500)
  *  antisymmetric, where p, q, and r have coordinates in [0, 32768)
  *  transitive, where p, q, r, and s have coordinates in [0, 500)
  *  transitive, where p, q, r, and s have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 500)
  *  sign of compare(), where p, q, and r have coordinates in [0, 32768)
  *  sign of compare(), where p, q, and r have coordinates in [0, 10)
  *  throw java.lang.NullPointerException if either argument is null
==&gt; passed


Total: 3/3 tests passed!

================================================================

******************************************************************************
*  correctness (using reference Point.java and LineSegment.java)
******************************************************************************

Testing methods in BruteCollinearPoints
*-----------------------------------------------------------
Running 16 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 6: Depends upon compareTo() or compare() returning { -1, +1, 0 }
        instead of { negative integer, positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
==&gt; passed

Test 7: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 8: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  10 random line segments
  *  15 random line segments
==&gt; passed

Test 9: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 10 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          collinear.segments()
          collinear.numberOfSegments() -&gt; 2
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 25 operations involving BruteCollinearPoints
     -  first and last call to segments() returned different arrays
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Check that data type does not mutate the constructor argument
  *  input8.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
  *  equidistant.txt
     -  data type mutated the points[] array
     -  data type should have no side effects unless documented in API
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 12: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 13: Constructor throws exception if duplicate points
  *  20 points
     -  failed on trial 11 of 10
  *  10 points
     -  failed on trial 101 of 100
  *  5 points
     -  failed on trial 101 of 100
  *  4 points
     -  failed on trial 101 of 100
  *  3 points
     -  failed on trial 101 of 100
  *  2 points
     -  failed on trial 101 of 100
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 13/16 tests passed!

================================================================

Testing methods in FastCollinearPoints
*-----------------------------------------------------------
Running 20 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 2a: Points from a file with horizontal line segments
  *  filename = horizontal5.txt
  *  filename = horizontal25.txt
  *  filename = horizontal50.txt
  *  filename = horizontal75.txt
  *  filename = horizontal100.txt
==&gt; passed

Test 2b: Random horizontal line segments
  *   1 random horizontal line segment
  *   5 random horizontal line segments
  *  10 random horizontal line segments
  *  15 random horizontal line segments
==&gt; passed

Test 3a: Points from a file with vertical line segments
  *  filename = vertical5.txt
  *  filename = vertical25.txt
  *  filename = vertical50.txt
  *  filename = vertical75.txt
  *  filename = vertical100.txt
==&gt; passed

Test 3b: Random vertical line segments
  *   1 random vertical line segment
  *   5 random vertical line segments
  *  10 random vertical line segments
  *  15 random vertical line segments
==&gt; passed

Test 4a: Points from a file with no line segments
  *  filename = random23.txt
  *  filename = random38.txt
  *  filename = random91.txt
  *  filename = random152.txt
==&gt; passed

Test 4b: Random points with no line segments
  *   5 random points
  *  10 random points
  *  20 random points
  *  50 random points
==&gt; passed

Test 5a: Points from a file with 5 or more on some line segments
  *  filename = input9.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 1000) -&gt; (8000, 8000)
     -  reference segment 0: (1000, 1000) -&gt; (2000, 2000) -&gt; (3000, 3000) -&gt; (4000, 4000) -&gt; (5000, 5000) -&gt; (6000, 6000) -&gt; (7000, 7000) -&gt; (8000, 8000) -&gt; (9000, 9000)

     -  student   solution has 6 non-null entries
     -  reference solution has 1 non-null entries
     -  5 extra entries in student solution, including: (1000, 1000) -&gt; (8000, 8000)

  *  filename = input10.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (1000, 18000) -&gt; (3500, 28000)
     -  reference segment 1: (1000, 18000) -&gt; (2000, 22000) -&gt; (3000, 26000) -&gt; (3500, 28000) -&gt; (4000, 30000)

     -  student   solution has 3 non-null entries
     -  reference solution has 2 non-null entries
     -  1 extra entry in student solution: (1000, 18000) -&gt; (3500, 28000)

  *  filename = input20.txt
     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 2: (5120, 20992) -&gt; (8128, 20992)
     -  reference segment 0: (4096, 20992) -&gt; (5120, 20992) -&gt; (6144, 20992) -&gt; (7168, 20992) -&gt; (8128, 20992)

     -  student   solution has 9 non-null entries
     -  reference solution has 5 non-null entries
     -  4 extra entries in student solution, including: (4160, 29184) -&gt; (7168, 29184)

  *  filename = input50.txt
     -  segments() contains the same segment more than once
     -  segment 1: (18000, 13000) -&gt; (18000, 30000)
     -  segment 5: (18000, 13000) -&gt; (18000, 30000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 7: (1000, 9000) -&gt; (1000, 26000)
     -  reference segment 5: (1000, 2000) -&gt; (1000, 9000) -&gt; (1000, 13000) -&gt; (1000, 23000) -&gt; (1000, 26000)

     -  student   solution has 9 non-null entries
     -  reference solution has 7 non-null entries
     -  2 extra entries in student solution, including: (18000, 13000) -&gt; (18000, 30000)

  *  filename = input80.txt
     -  segments() contains the same segment more than once
     -  segment 2: (30000, 12000) -&gt; (13000, 29000)
     -  segment 5: (30000, 12000) -&gt; (13000, 29000)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (0, 23000) -&gt; (26000, 23000)
     -  reference segment 10: (0, 23000) -&gt; (8000, 23000) -&gt; (21000, 23000) -&gt; (26000, 23000) -&gt; (30000, 23000)

     -  student   solution has 41 non-null entries
     -  reference solution has 31 non-null entries
     -  10 extra entries in student solution, including: (0, 23000) -&gt; (26000, 23000)

  *  filename = input300.txt
     -  segments() contains the same segment more than once
     -  segment 1: (7300, 10050) -&gt; (7300, 31650)
     -  segment 6: (7300, 10050) -&gt; (7300, 31650)

     -  student   solution has 7 non-null entries
     -  reference solution has 6 non-null entries
     -  1 extra entry in student solution: (7300, 10050) -&gt; (7300, 31650)

  *  filename = inarow.txt
     -  segments() contains the same segment more than once
     -  segment 0: (0, 0) -&gt; (30000, 0)
     -  segment 2: (0, 0) -&gt; (30000, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 6: (10000, 3100) -&gt; (25000, 12400)
     -  reference segment 2: (5000, 0) -&gt; (10000, 3100) -&gt; (15000, 6200) -&gt; (20000, 9300) -&gt; (25000, 12400)

     -  student   solution has 15 non-null entries
     -  reference solution has 5 non-null entries
     -  10 extra entries in student solution, including: (26000, 10000) -&gt; (18000, 30000)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5b: Points from a file with 5 or more on some line segments
  *  filename = kw1260.txt
     -  segments() contains the same segment more than once
     -  segment 284: (15614, 13995) -&gt; (15334, 14491)
     -  segment 293: (15614, 13995) -&gt; (15334, 14491)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 1: (16507, 473) -&gt; (16666, 1529)
     -  reference segment 253: (16454, 121) -&gt; (16507, 473) -&gt; (16560, 825) -&gt; (16613, 1177) -&gt; (16666, 1529)

     -  student   solution has 645 non-null entries
     -  reference solution has 288 non-null entries
     -  357 extra entries in student solution, including: (13180, 30413) -&gt; (14764, 30467)

  *  filename = rs1423.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 6: Points from a file with fewer than 4 points
  *  filename = input1.txt
  *  filename = input2.txt
  *  filename = input3.txt
==&gt; passed

Test 7: Depends upon compareTo() or compare() returning { -1, +1, 0 }
        instead of { negative integer, positive integer, zero }
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = input299.txt
==&gt; passed

Test 8: Random line segments, none vertical or horizontal
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 9: Random line segments
  *   1 random line segment
  *   5 random line segments
  *  25 random line segments
  *  50 random line segments
  *  100 random line segments
==&gt; passed

Test 10: Random distinct points in a given range
  *  5 random points in a 10-by-10 grid
  *  10 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 0: (1, 8) -&gt; (7, 8)
     -  segment 1: (1, 8) -&gt; (7, 8)

     -  student   solution has 2 non-null entries
     -  reference solution has 1 non-null entries
     -  1 extra entry in student solution: (1, 8) -&gt; (7, 8)

     -  failed on trial 122 of 500
     10
         3     8
         1     3
         5     8
         7     1
         5     0
         5     7
         4     8
         7     8
         0     5
         1     8

  *  50 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 8: (7, 0) -&gt; (0, 7)
     -  segment 12: (7, 0) -&gt; (0, 7)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 15: (7, 0) -&gt; (1, 6)
     -  reference segment 7: (7, 0) -&gt; (6, 1) -&gt; (4, 3) -&gt; (2, 5) -&gt; (1, 6) -&gt; (0, 7)

     -  student   solution has 83 non-null entries
     -  reference solution has 46 non-null entries
     -  37 extra entries in student solution, including: (0, 8) -&gt; (8, 8)

     -  failed on trial 1 of 100

  *  90 random points in a 10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 1: (8, 0) -&gt; (0, 8)
     -  segment 7: (8, 0) -&gt; (0, 8)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 48: (6, 0) -&gt; (6, 8)
     -  reference segment 128: (6, 0) -&gt; (6, 1) -&gt; (6, 2) -&gt; (6, 3) -&gt; (6, 4) -&gt; (6, 5) -&gt; (6, 6) -&gt; (6, 7) -&gt; (6, 8) -&gt; (6, 9)

     -  student   solution has 316 non-null entries
     -  reference solution has 132 non-null entries
     -  184 extra entries in student solution, including: (0, 9) -&gt; (8, 9)

     -  failed on trial 1 of 50

  *  200 random points in a 50-by-50 grid
     -  segments() contains the same segment more than once
     -  segment 13: (8, 22) -&gt; (32, 46)
     -  segment 33: (8, 22) -&gt; (32, 46)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 20: (28, 7) -&gt; (28, 42)
     -  reference segment 206: (28, 6) -&gt; (28, 7) -&gt; (28, 8) -&gt; (28, 10) -&gt; (28, 14) -&gt; (28, 26) -&gt; (28, 33) -&gt; (28, 34) -&gt; (28, 35) -&gt; (28, 41) -&gt; (28, 42)

     -  student   solution has 352 non-null entries
     -  reference solution has 214 non-null entries
     -  138 extra entries in student solution, including: (0, 49) -&gt; (49, 49)

     -  failed on trial 1 of 10

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: M*N points on an M-by-N grid
  *  3-by-3 grid
  *  4-by-4 grid
  *  5-by-5 grid
     -  segments() contains the same segment more than once
     -  segment 5: (0, 0) -&gt; (4, 0)
     -  segment 15: (0, 0) -&gt; (4, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 8: (0, 2) -&gt; (3, 2)
     -  reference segment 5: (0, 2) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (4, 2)

     -  student   solution has 28 non-null entries
     -  reference solution has 16 non-null entries
     -  12 extra entries in student solution, including: (0, 4) -&gt; (4, 4)

  *  10-by-10 grid
     -  segments() contains the same segment more than once
     -  segment 1: (7, 0) -&gt; (0, 7)
     -  segment 22: (7, 0) -&gt; (0, 7)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 58: (1, 1) -&gt; (1, 9)
     -  reference segment 145: (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; (1, 3) -&gt; (1, 4) -&gt; (1, 5) -&gt; (1, 6) -&gt; (1, 7) -&gt; (1, 8) -&gt; (1, 9)

     -  student   solution has 394 non-null entries
     -  reference solution has 154 non-null entries
     -  240 extra entries in student solution, including: (1, 9) -&gt; (9, 9)

  *  20-by-20 grid
     -  segments() contains the same segment more than once
     -  segment 74: (19, 7) -&gt; (1, 13)
     -  segment 106: (19, 7) -&gt; (1, 13)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 130: (12, 1) -&gt; (0, 7)
     -  reference segment 845: (14, 0) -&gt; (12, 1) -&gt; (10, 2) -&gt; (8, 3) -&gt; (6, 4) -&gt; (4, 5) -&gt; (2, 6) -&gt; (0, 7)

     -  student   solution has 5646 non-null entries
     -  reference solution has 2446 non-null entries
     -  3200 extra entries in student solution, including: (5, 19) -&gt; (17, 19)

  *  5-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 0: (0, 3) -&gt; (4, 3)
     -  segment 6: (0, 3) -&gt; (4, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 14: (1, 1) -&gt; (4, 1)
     -  reference segment 3: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1)

     -  student   solution has 17 non-null entries
     -  reference solution has 13 non-null entries
     -  4 extra entries in student solution, including: (0, 3) -&gt; (4, 3)

  *  6-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 3) -&gt; (5, 3)
     -  segment 9: (0, 3) -&gt; (5, 3)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 11: (1, 1) -&gt; (5, 1)
     -  reference segment 4: (0, 1) -&gt; (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (4, 1) -&gt; (5, 1)

     -  student   solution has 24 non-null entries
     -  reference solution has 16 non-null entries
     -  8 extra entries in student solution, including: (0, 3) -&gt; (5, 3)

  *  10-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 4: (0, 0) -&gt; (9, 0)
     -  segment 7: (0, 0) -&gt; (9, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 32: (0, 3) -&gt; (8, 3)
     -  reference segment 15: (0, 3) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3) -&gt; (4, 3) -&gt; (5, 3) -&gt; (6, 3) -&gt; (7, 3) -&gt; (8, 3) -&gt; (9, 3)

     -  student   solution has 62 non-null entries
     -  reference solution has 38 non-null entries
     -  24 extra entries in student solution, including: (0, 3) -&gt; (8, 3)

  *  15-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 1: (0, 0) -&gt; (14, 0)
     -  segment 7: (0, 0) -&gt; (14, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 46: (0, 0) -&gt; (13, 0)
     -  reference segment 30: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0) -&gt; (5, 0) -&gt; (6, 0) -&gt; (7, 0) -&gt; (8, 0) -&gt; (9, 0) -&gt; (10, 0) -&gt; (11, 0) -&gt; (12, 0) -&gt; (13, 0) -&gt; (14, 0)

     -  student   solution has 123 non-null entries
     -  reference solution has 79 non-null entries
     -  44 extra entries in student solution, including: (1, 3) -&gt; (14, 3)

  *  25-by-4 grid
     -  segments() contains the same segment more than once
     -  segment 3: (0, 0) -&gt; (24, 0)
     -  segment 17: (0, 0) -&gt; (24, 0)

     -  segments() contains a subsegment of a segment in reference solution
     -  student   segment 70: (0, 0) -&gt; (23, 0)
     -  reference segment 92: (0, 0) -&gt; (1, 0) -&gt; (2, 0) -&gt; (3, 0) -&gt; (4, 0) -&gt; (5, 0) -&gt; (6, 0) -&gt; (7, 0) -&gt; (8, 0) -&gt; (9, 0) -&gt; (10, 0) -&gt; (11, 0) -&gt; (12, 0) -&gt; (13, 0) -&gt; (14, 0) -&gt; (15, 0) -&gt; (16, 0) -&gt; (17, 0) -&gt; (18, 0) -&gt; (19, 0) -&gt; (20, 0) -&gt; (21, 0) -&gt; (22, 0) -&gt; (23, 0) -&gt; (24, 0)

     -  student   solution has 297 non-null entries
     -  reference solution has 213 non-null entries
     -  84 extra entries in student solution, including: (0, 3) -&gt; (24, 3)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: Check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  *  input8.txt
     -  failed after 10 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          collinear.segments()
          mutate points[] array that was passed to constructor
          mutate array returned by last call to segments()
          mutate points[] array that was passed to constructor
          collinear.numberOfSegments() -&gt; 2
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

  *  equidistant.txt
     -  failed after 4 operations involving FastCollinearPoints
     -  first and last call to segments() returned different arrays
     -  sequence of operations was:
          FastCollinearPoints collinear = new FastCollinearPoints(points);
          collinear.segments()
          mutate array returned by last call to segments()
          collinear.segments()
     -  failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check that data type does not mutate the constructor argument
  *  input8.txt
  *  equidistant.txt
==&gt; passed

Test 14: numberOfSegments() is consistent with segments()
  *  filename = input8.txt
  *  filename = equidistant.txt
  *  filename = input40.txt
  *  filename = input48.txt
  *  filename = horizontal5.txt
  *  filename = vertical5.txt
  *  filename = random23.txt
==&gt; passed

Test 15: Throws exception either if argument to constructor is null
         or if any entry in array is null
  *  argument is null
  *  Point[] of length 10, number of null entries = 1
  *  Point[] of length 10, number of null entries = 10
  *  Point[] of length 4, number of null entries = 1
  *  Point[] of length 3, number of null entries = 1
  *  Point[] of length 2, number of null entries = 1
  *  Point[] of length 1, number of null entries = 1
==&gt; passed

Test 16: Constructor throws exception if duplicate points
  *  20 points
     -  failed on trial 11 of 10
  *  10 points
     -  failed on trial 101 of 100
  *  5 points
     -  failed on trial 101 of 100
  *  4 points
     -  failed on trial 101 of 100
  *  3 points
     -  failed on trial 101 of 100
  *  2 points
     -  failed on trial 101 of 100
==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 14/20 tests passed!

================================================================

******************************************************************************
*  memory
******************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.02         680           0            680                   44         
=&gt; passed    32   0.00        5456           0           5456                  114         
=&gt; passed    64   0.01       43680           0          43680                  306         
=&gt; passed   128   0.01      349504           0         349504                  742         
=&gt; passed   256   0.08     2796160           0        2796160                 1733         
==&gt; 5/5 tests passed

Test 2a-2e: Find collinear points among N/4 arbitrary line segments


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    16   0.00         743           0            743                   45         
=&gt; passed    32   0.00        5836           0           5836                  121         
=&gt; passed    64   0.00       45483           0          45483                  295         
=&gt; passed   128   0.01      356219           0         356219                  735         
=&gt; passed   256   0.04     2822145           0        2822145                 1729         
==&gt; 5/5 tests passed

Total: 10/10 tests passed!

================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1e: Find collinear points among N random distinct points


                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.03           0       12164          24328                    0         
=&gt; passed   128   0.01           0       57085         114170                    0         
=&gt; passed   256   0.03           0      261839         523678                    0         
=&gt; passed   512   0.13           0     1180536        2361072                    0         
=&gt; passed  1024   0.44           0     5247211       10494422                    0         
=&gt; passed  2048   1.03           0    23090130       46180260                    0         
==&gt; 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (46180260 / 10494422) = 2.14
=&gt; passed

==&gt; 7/7 tests passed

Test 2a-2e: Find collinear points among the N points on an N-by-1 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.01           0        3968           7936                 8540         
=&gt; passed   128   0.01           0       16128          32256                41807         
=&gt; passed   256   0.02           0       65024         130048               198462         
=&gt; passed   512   0.10           0      261120         522240               921948         
=&gt; passed  1024   0.41           0     1046528        2093056              4203842         
=&gt; passed  2048   0.66           0     4190208        8380416             18901734         
=&gt; passed  4096   2.21           0    16769024       33538048             83981429         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33538048 / 8380416) = 2.00
=&gt; passed

==&gt; 8/8 tests passed

Test 3a-3e: Find collinear points among the 4N points on an N/4-by-4 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11472          22944                 1718         
=&gt; passed   128   0.00           0       53682         107364                 8467         
=&gt; passed   256   0.01           0      244217         488434                41009         
=&gt; passed   512   0.06           0     1090219        2180438               195657         
=&gt; passed  1024   0.22           0     4794334        9588668               908916         
=&gt; passed  2048   0.93           0    20844656       41689312              4148640         
=&gt; passed  4096   4.06           0    90012474      180024948             18687845         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (180024948 / 41689312) = 2.11
=&gt; passed

==&gt; 8/8 tests passed

Test 4a-4e: Find collinear points among the 8N points on an N/8-by-8 grid

                                                      slopeTo()
             N    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=&gt; passed    64   0.00           0       11498          22996                 1490         
=&gt; passed   128   0.00           0       54271         108542                 6695         
=&gt; passed   256   0.01           0      249634         499268                29774         
=&gt; passed   512   0.05           0     1123255        2246510               133496         
=&gt; passed  1024   0.22           0     4979116        9958232               595386         
=&gt; passed  2048   0.98           0    21817274       43634548              2637905         
=&gt; passed  4096   4.21           0    94816134      189632268             11590754         
==&gt; 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (189632268 / 43634548) = 2.12
=&gt; passed

==&gt; 8/8 tests passed

Total: 31/31 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-24-Sep 05:59:28</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>

BruteCollinearPoints.java failed to compile, javac reports: <p>
</p><pre>BruteCollinearPoints.java could not be found.</pre>
FastCollinearPoints.java failed to compile, javac reports: <p>
</p><pre>FastCollinearPoints.java could not be found.</pre></pre></td></tr>
    </tbody>
</table>

</div></div></div></div></div><div class="coursera-footer"></div></div></div></div><!--[if gte IE 9]><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><![endif]-->
<!--[if lte IE 8]><script>document.getElementById("coursera-loading-nojs").style.display = 'block';</script><![endif]-->
<!--[if !IE]> --><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><!-- <![endif]--><script>if (/zh/i.test(window.localStorage ? localStorage.getItem('locale') : '') || '{{ locale }}') {
  document.getElementById('get-browser-zh').style.display = 'block';
}</script><!--[if !IE]> --><script>document.getElementById('coursera-loading-js').style.display = 'block';</script><!-- <![endif]-->
<script src="Assignment%203_result_files/require.js"></script><script data-baseurl="https://dw0ugk4msqulk.cloudfront.net/ebfbef57ce42b5989d5da36106da956cf9ffed2c/" data-version="ebfbef57ce42b5989d5da36106da956cf9ffed2c" data-timestamp="1443550029862" data-debug="0" data-locale="en" id="_require">if(document.getElementById('coursera-loading-js').style.display == 'block') {
  (function(el) {
     require.config({
       //enforceDefine: true,
       waitSeconds: 75,
       baseUrl: el.getAttribute('data-baseurl'),
       urlArgs: el.getAttribute('data-debug') == '1' ? 'v=' + el.getAttribute('data-timestamp') : '',
       shim: {
          'underscore': {
             exports: '_'
          },
          'backbone': {
             deps: ['underscore', 'jquery'],
             exports: 'Backbone',
             init: function(_, $) {
               Backbone.$ = $;
               return Backbone;
             }
          },
          'pages/hg/thirdparty/js/backbone.marionette': {
            deps: ['backbone']
          },
          'pages/hg/thirdparty/js/webshims/polyfiller': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/webshims/extras/mousepress': {
            deps: ['jquery', 'pages/hg/thirdparty/js/webshims/polyfiller']
          },
          'pages/hg/thirdparty/js/jquery.throttle': {
            deps: ['jquery']
          },
          'js/lib/jquery.linkify': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/js/bootstrap/alert': {
            deps: ['jquery', 'pages/hg/thirdparty/js/bootstrap/transition']
          },
          'spark/core/js/jquery_ui': {
            deps: ['jquery']
          },
          'spark/core/js/jquery.history': {
            deps: ['jquery']
          },
          'js/lib/bootstrap.tooltip': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/bootstrap/transition': {
            deps: ['jquery']
          },
          'pages/hg/thirdparty/js/bootstrap/tab': {
            deps: ['jquery']
          },
          'bundles/videojs/lib/video.4.3.0': {
            exports: 'vjs'
          }
       },
       paths: {
          'q': 'js/vendor/q.v1-0-1',
          'react-with-addons': 'js/vendor/react-with-addons.v0-12',
          'jquery':                         'pages/spark/jquery',
          'underscore':                     'js/vendor/underscore.v1-5-2',
          'backbone':                       'js/vendor/backbone.v1-1-0',
          'backbone.relational':            'js/lib/backbone.relational.0.8.6',
          'i18n':                           'js/lib/i18n._t',
          'css':                            'js/vendor/require.css.v0-1-2',
          'memoize':                        'js/lib/require.memoize.v0-0-1',
          'pages/spark/models/user.json':   'empty:',
          'pages/spark/models/course.json': 'empty:',
          'pages/spark/models/navbar.json': 'empty:'
       },
       callback: function() {
                    require(['pages/spark/routes']);
                },
       config: {
         i18n: {
           locale: (window.localStorage ? localStorage.getItem('locale') : '') || el.getAttribute('data-locale')
         }
       }
     });
  })(document.getElementById('_require'));
}
</script><script>define('pages/spark/models/user.json', [], function(){
      return JSON.parse("{\"id\":8585290,\"email_address\":\"pmengguan@gmail.com\",\"full_name\":\"Pan Mengguan\",\"locale\":null,\"timezone\":\"America\\\/Los_Angeles\",\"access_group_id\":\"4\",\"registration_time\":\"1439650159\",\"last_access_time\":\"1444003699\",\"last_access_ip\":\"36.63.40.193\",\"signature_track_register_time\":\"0\",\"email_announcement\":\"1\",\"email_forum\":\"1\",\"in_signature_track\":\"0\",\"wishes_proctored_exam\":\"0\",\"first_name\":\"Pan\",\"permissions\":[\"default\",\"allow_site_access\"],\"group\":\"Student\",\"anonymous\":false,\"forum_title\":\"Student\",\"signature_track_state\":1,\"verified_quizzes\":[],\"submitted_quizzes\":[\"90\",\"131\"],\"scheduled_proctored_exam\":null,\"last_chance_modal\":null,\"flexjoin_last_chance_modal\":null}");
  });
define('pages/spark/models/course.json', [], function(){
      return JSON.parse("{\"id\":976149,\"isPrivate\":false,\"type\":\"public\",\"name\":\"Algorithms, Part I\",\"instructor\":\"Kevin Wayne, Robert Sedgewick\",\"sessionName\":\"algs4partI-009\",\"externalBaseURL\":\"https:\\\/\\\/www.coursera.org\\\/\",\"shortname\":\"algs4partI\",\"host\":\"https:\\\/\\\/www.coursera.org\\\/\",\"assetUnversionedLink\":\"https:\\\/\\\/dw0ugk4msqulk.cloudfront.net\\\/\",\"cheggID\":\"\",\"hasLTI\":true,\"badgevilleDomain\":\"\",\"linkable\":false,\"universityShortname\":\"princeton\",\"signatureTrackStatus\":{\"signature_track_enabled\":0},\"courseURLs\":{\"log_in_link\":\"https:\\\/\\\/www.coursera.org\\\/login?post_redirect=https%3A%2F%2Fwww.coursera.org%2Flogin%3Fuser_action%3Dclass%26course_id%3D976149%26post_redirect%3Dhttps%253A%252F%252Fclass.coursera.org%252Falgs4partI-009%252Fauth%252Fauth_redirector%253Ftype%253Dlogin%2526subtype%253Dnormal%2526visiting%253D\",\"sign_up_link\":\"https:\\\/\\\/www.coursera.org\\\/signup?enroll_cid=976149&enroll_sn=algs4partI&enroll_n=Algorithms, Part I\",\"view_course_info_link\":\"https:\\\/\\\/www.coursera.org\\\/course\\\/algs4partI\",\"sign_up_link_cant_enroll\":\"https:\\\/\\\/www.coursera.org\\\/signup?post_redirect=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Falgs4partI\"},\"courseBase\":\"https:\\\/\\\/class.coursera.org\\\/algs4partI-009\\\/\",\"search\":true,\"hideWiki\":true,\"aceStartRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceEndRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamStartDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamEndDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamRules\":\"\",\"aceExamDuration\":\"\",\"aceBeforeExam\":false,\"aceAfterExam\":true,\"aceHours\":null,\"aceCreditType\":\"\",\"acePrice\":null,\"aceExamID\":null,\"aceEligible\":false,\"canRegisterForACE\":false,\"specialization\":null,\"supportForums\":true,\"textbooks\":\"\",\"inVideoQuizV2\":false,\"in_flexjoin\":0,\"honorCodeExtraText\":\"I will not to post solutions or partial solutions to the programming assignments publicly (e.g., in the discussion forums or in public code repositories such as GitHub).\",\"honorCodeCustomTitle\":\"\",\"honorCodeCustomButton\":\"\",\"studentAccessDisabled\":0,\"disableQQs\":false}");
  });
  define('pages/spark/models/navbar.json', [], function(){
      return JSON.parse("{\"items\":[{\"name\":\"Home\",\"icon\":\"home\",\"link_type\":\"circuit\",\"link_data\":\"class:index\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Syllabus\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=syllabus\"},{\"name\":\"Schedule\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=schedule\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Lectures\",\"icon\":\"lecture\",\"link_type\":\"circuit\",\"link_data\":\"lecture:index\"},{\"name\":\"Exercises\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index\"},{\"name\":\"Programming Assignments\",\"icon\":\"assignment\",\"link_type\":\"circuit\",\"link_data\":\"assignment:index\"},{\"name\":\"Job Interview Questions\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=homework\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Discussion Forums\",\"icon\":\"forum\",\"link_type\":\"circuit\",\"link_data\":\"forum:index\"},{\"name\":\"Google+ Hangouts\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=ScheduleGoogleHangouts\"},{\"name\":\"Errata\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=errata\"},{\"name\":\"Surveys\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=survey\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Booksite\",\"icon\":\"wiki\",\"link_type\":\"window_link\",\"link_data\":\"http:\\\/\\\/algs4.cs.princeton.edu\"}]}");
  });
</script><script>var coursera_enable_new_help_center = true;
</script><div class="hide confirm-navigation modal"><div class="modal-header"><h3>Confirm Navigation</h3></div><div class="modal-body"><div class="confirm-navigation-message"></div><div>Are you sure you want to leave this page?</div></div><div class="modal-footer"><button data-modal-close="data-modal-close" class="btn confirm-navigation-stay">Stay on this Page</button><button data-modal-close="data-modal-close" class="btn btn-danger confirm-navigation-leave">Leave this Page</button></div></div><div style="display: none;" class="coursera-async-message"></div></body></html>